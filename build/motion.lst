ARM GAS  C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"motion.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.Normal_Turn_Half,"ax",%progbits
  18              		.align	1
  19              		.global	Normal_Turn_Half
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	Normal_Turn_Half:
  26              	.LFB126:
  27              		.file 1 "Src/motion.c"
   1:Src/motion.c  **** #include "motion.h"
   2:Src/motion.c  **** #include "tim.h"
   3:Src/motion.c  **** #include "global.h"
   4:Src/motion.c  **** #include "control.h"
   5:Src/motion.c  **** #include "gpio.h"
   6:Src/motion.c  **** #include "spi.h"
   7:Src/motion.c  **** #include "maze.h"
   8:Src/motion.c  **** 
   9:Src/motion.c  **** 
  10:Src/motion.c  **** void Normal_Turn_Half(void){
  28              		.loc 1 10 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 38B5     		push	{r3, r4, r5, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 16
  35              		.cfi_offset 3, -16
  36              		.cfi_offset 4, -12
  37              		.cfi_offset 5, -8
  38              		.cfi_offset 14, -4
  11:Src/motion.c  ****     flag.ir_led = ON;
  39              		.loc 1 11 0
  40 0002 164B     		ldr	r3, .L6
  41 0004 0122     		movs	r2, #1
  42 0006 5A71     		strb	r2, [r3, #5]
  43              	.L2:
  12:Src/motion.c  ****     while(1){
  13:Src/motion.c  ****         if(sensor.wall[0]==true && sensor.wall[3]==true){
  44              		.loc 1 13 0
  45 0008 154B     		ldr	r3, .L6+4
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s 			page 2


  46 000a 9B7E     		ldrb	r3, [r3, #26]	@ zero_extendqisi2
  47 000c 012B     		cmp	r3, #1
  48 000e FBD1     		bne	.L2
  49              		.loc 1 13 0 is_stmt 0 discriminator 1
  50 0010 134B     		ldr	r3, .L6+4
  51 0012 5B7F     		ldrb	r3, [r3, #29]	@ zero_extendqisi2
  52 0014 012B     		cmp	r3, #1
  53 0016 F7D1     		bne	.L2
  14:Src/motion.c  ****             Output_Buzzer(HZ_C_H);
  54              		.loc 1 14 0 is_stmt 1
  55 0018 4C20     		movs	r0, #76
  56 001a FFF7FEFF 		bl	Output_Buzzer
  57              	.LVL0:
  15:Src/motion.c  ****             break;
  16:Src/motion.c  ****         }
  17:Src/motion.c  ****     }
  18:Src/motion.c  ****     flag.ir_led = OFF;
  58              		.loc 1 18 0
  59 001e 0F4D     		ldr	r5, .L6
  60 0020 0024     		movs	r4, #0
  61 0022 6C71     		strb	r4, [r5, #5]
  19:Src/motion.c  ****     gyro_offset_calc_reset();
  62              		.loc 1 19 0
  63 0024 FFF7FEFF 		bl	gyro_offset_calc_reset
  64              	.LVL1:
  20:Src/motion.c  ****     Yawrate_Calc_fb(180,0,0);
  65              		.loc 1 20 0
  66 0028 2246     		mov	r2, r4
  67 002a 2146     		mov	r1, r4
  68 002c B420     		movs	r0, #180
  69 002e FFF7FEFF 		bl	Yawrate_Calc_fb
  70              	.LVL2:
  21:Src/motion.c  ****     HAL_Delay(1500);
  71              		.loc 1 21 0
  72 0032 40F2DC50 		movw	r0, #1500
  73 0036 FFF7FEFF 		bl	HAL_Delay
  74              	.LVL3:
  22:Src/motion.c  ****     Output_Buzzer(HZ_C_H);
  75              		.loc 1 22 0
  76 003a 4C20     		movs	r0, #76
  77 003c FFF7FEFF 		bl	Output_Buzzer
  78              	.LVL4:
  23:Src/motion.c  ****     flag.yawrate = ON;
  79              		.loc 1 23 0
  80 0040 0123     		movs	r3, #1
  81 0042 AB70     		strb	r3, [r5, #2]
  82              	.L4:
  24:Src/motion.c  ****     while(1){
  25:Src/motion.c  ****         if(Push()==ON){
  83              		.loc 1 25 0
  84 0044 FFF7FEFF 		bl	Push
  85              	.LVL5:
  86 0048 0128     		cmp	r0, #1
  87 004a FBD1     		bne	.L4
  26:Src/motion.c  ****             flag.yawrate = OFF;
  88              		.loc 1 26 0
  89 004c 034B     		ldr	r3, .L6
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s 			page 3


  90 004e 0022     		movs	r2, #0
  91 0050 9A70     		strb	r2, [r3, #2]
  27:Src/motion.c  ****             Output_Buzzer(HZ_A);
  92              		.loc 1 27 0
  93 0052 5B20     		movs	r0, #91
  94 0054 FFF7FEFF 		bl	Output_Buzzer
  95              	.LVL6:
  28:Src/motion.c  ****             break;
  29:Src/motion.c  ****         }
  30:Src/motion.c  ****     }
  31:Src/motion.c  **** }
  96              		.loc 1 31 0
  97 0058 38BD     		pop	{r3, r4, r5, pc}
  98              	.L7:
  99 005a 00BF     		.align	2
 100              	.L6:
 101 005c 00000000 		.word	flag
 102 0060 00000000 		.word	sensor
 103              		.cfi_endproc
 104              	.LFE126:
 106              		.section	.text.Normal_Ennkai,"ax",%progbits
 107              		.align	1
 108              		.global	Normal_Ennkai
 109              		.syntax unified
 110              		.thumb
 111              		.thumb_func
 112              		.fpu fpv4-sp-d16
 114              	Normal_Ennkai:
 115              	.LFB127:
  32:Src/motion.c  **** 
  33:Src/motion.c  **** /****************************************************************************************
  34:Src/motion.c  ****  * outline  : "ennkaigei"
  35:Src/motion.c  ****  * argument : void
  36:Src/motion.c  ****  * return   : void
  37:Src/motion.c  **** ********************************************************************************************/
  38:Src/motion.c  **** void Normal_Ennkai(void){
 116              		.loc 1 38 0
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 0
 119              		@ frame_needed = 0, uses_anonymous_args = 0
 120 0000 10B5     		push	{r4, lr}
 121              	.LCFI1:
 122              		.cfi_def_cfa_offset 8
 123              		.cfi_offset 4, -8
 124              		.cfi_offset 14, -4
  39:Src/motion.c  ****     flag.ir_led = ON;
 125              		.loc 1 39 0
 126 0002 164B     		ldr	r3, .L13
 127 0004 0122     		movs	r2, #1
 128 0006 5A71     		strb	r2, [r3, #5]
 129              	.L9:
  40:Src/motion.c  ****     while(1){
  41:Src/motion.c  ****         if(sensor.wall[0]==true && sensor.wall[3]==true){
 130              		.loc 1 41 0
 131 0008 154B     		ldr	r3, .L13+4
 132 000a 9B7E     		ldrb	r3, [r3, #26]	@ zero_extendqisi2
 133 000c 012B     		cmp	r3, #1
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s 			page 4


 134 000e FBD1     		bne	.L9
 135              		.loc 1 41 0 is_stmt 0 discriminator 1
 136 0010 134B     		ldr	r3, .L13+4
 137 0012 5B7F     		ldrb	r3, [r3, #29]	@ zero_extendqisi2
 138 0014 012B     		cmp	r3, #1
 139 0016 F7D1     		bne	.L9
  42:Src/motion.c  ****             Output_Buzzer(HZ_C_H);
 140              		.loc 1 42 0 is_stmt 1
 141 0018 4C20     		movs	r0, #76
 142 001a FFF7FEFF 		bl	Output_Buzzer
 143              	.LVL7:
  43:Src/motion.c  ****             break;
  44:Src/motion.c  ****         }
  45:Src/motion.c  ****     }
  46:Src/motion.c  ****     flag.ir_led = OFF;
 144              		.loc 1 46 0
 145 001e 0F4C     		ldr	r4, .L13
 146 0020 0023     		movs	r3, #0
 147 0022 6371     		strb	r3, [r4, #5]
  47:Src/motion.c  ****     HAL_Delay(500);
 148              		.loc 1 47 0
 149 0024 4FF4FA70 		mov	r0, #500
 150 0028 FFF7FEFF 		bl	HAL_Delay
 151              	.LVL8:
  48:Src/motion.c  ****     gyro_offset_calc_reset();
 152              		.loc 1 48 0
 153 002c FFF7FEFF 		bl	gyro_offset_calc_reset
 154              	.LVL9:
  49:Src/motion.c  ****     Yawrate_Calc_Zero();
 155              		.loc 1 49 0
 156 0030 FFF7FEFF 		bl	Yawrate_Calc_Zero
 157              	.LVL10:
  50:Src/motion.c  ****     HAL_Delay(1500);
 158              		.loc 1 50 0
 159 0034 40F2DC50 		movw	r0, #1500
 160 0038 FFF7FEFF 		bl	HAL_Delay
 161              	.LVL11:
  51:Src/motion.c  ****     Output_Buzzer(HZ_C_H);
 162              		.loc 1 51 0
 163 003c 4C20     		movs	r0, #76
 164 003e FFF7FEFF 		bl	Output_Buzzer
 165              	.LVL12:
  52:Src/motion.c  ****     flag.yawrate = ON;
 166              		.loc 1 52 0
 167 0042 0123     		movs	r3, #1
 168 0044 A370     		strb	r3, [r4, #2]
 169              	.L11:
  53:Src/motion.c  ****     while(1){
  54:Src/motion.c  ****         if(Push()==ON){
 170              		.loc 1 54 0
 171 0046 FFF7FEFF 		bl	Push
 172              	.LVL13:
 173 004a 0128     		cmp	r0, #1
 174 004c FBD1     		bne	.L11
  55:Src/motion.c  ****             flag.yawrate = OFF;
 175              		.loc 1 55 0
 176 004e 034B     		ldr	r3, .L13
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s 			page 5


 177 0050 0022     		movs	r2, #0
 178 0052 9A70     		strb	r2, [r3, #2]
  56:Src/motion.c  ****             Output_Buzzer(HZ_A);
 179              		.loc 1 56 0
 180 0054 5B20     		movs	r0, #91
 181 0056 FFF7FEFF 		bl	Output_Buzzer
 182              	.LVL14:
  57:Src/motion.c  ****             break;
  58:Src/motion.c  ****         }
  59:Src/motion.c  ****     }
  60:Src/motion.c  **** }
 183              		.loc 1 60 0
 184 005a 10BD     		pop	{r4, pc}
 185              	.L14:
 186              		.align	2
 187              	.L13:
 188 005c 00000000 		.word	flag
 189 0060 00000000 		.word	sensor
 190              		.cfi_endproc
 191              	.LFE127:
 193              		.section	.text.Ennkai,"ax",%progbits
 194              		.align	1
 195              		.global	Ennkai
 196              		.syntax unified
 197              		.thumb
 198              		.thumb_func
 199              		.fpu fpv4-sp-d16
 201              	Ennkai:
 202              	.LFB128:
  61:Src/motion.c  **** 
  62:Src/motion.c  **** void Ennkai(void){
 203              		.loc 1 62 0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 0
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 207 0000 10B5     		push	{r4, lr}
 208              	.LCFI2:
 209              		.cfi_def_cfa_offset 8
 210              		.cfi_offset 4, -8
 211              		.cfi_offset 14, -4
  63:Src/motion.c  ****     flag.ir_led = ON;
 212              		.loc 1 63 0
 213 0002 184B     		ldr	r3, .L20
 214 0004 0122     		movs	r2, #1
 215 0006 5A71     		strb	r2, [r3, #5]
 216              	.L16:
  64:Src/motion.c  ****     while(1){
  65:Src/motion.c  ****         if(sensor.wall[0]==true && sensor.wall[3]==true){
 217              		.loc 1 65 0
 218 0008 174B     		ldr	r3, .L20+4
 219 000a 9B7E     		ldrb	r3, [r3, #26]	@ zero_extendqisi2
 220 000c 012B     		cmp	r3, #1
 221 000e FBD1     		bne	.L16
 222              		.loc 1 65 0 is_stmt 0 discriminator 1
 223 0010 154B     		ldr	r3, .L20+4
 224 0012 5B7F     		ldrb	r3, [r3, #29]	@ zero_extendqisi2
 225 0014 012B     		cmp	r3, #1
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s 			page 6


 226 0016 F7D1     		bne	.L16
  66:Src/motion.c  ****             Output_Buzzer(HZ_C_H);
 227              		.loc 1 66 0 is_stmt 1
 228 0018 4C20     		movs	r0, #76
 229 001a FFF7FEFF 		bl	Output_Buzzer
 230              	.LVL15:
  67:Src/motion.c  ****             break;
  68:Src/motion.c  ****         }
  69:Src/motion.c  ****     }
  70:Src/motion.c  ****     flag.ir_led = OFF;
 231              		.loc 1 70 0
 232 001e 114C     		ldr	r4, .L20
 233 0020 0023     		movs	r3, #0
 234 0022 6371     		strb	r3, [r4, #5]
  71:Src/motion.c  ****     HAL_Delay(500);
 235              		.loc 1 71 0
 236 0024 4FF4FA70 		mov	r0, #500
 237 0028 FFF7FEFF 		bl	HAL_Delay
 238              	.LVL16:
  72:Src/motion.c  ****     gyro_offset_calc_reset();
 239              		.loc 1 72 0
 240 002c FFF7FEFF 		bl	gyro_offset_calc_reset
 241              	.LVL17:
  73:Src/motion.c  ****     Yawrate_Calc_Zero();
 242              		.loc 1 73 0
 243 0030 FFF7FEFF 		bl	Yawrate_Calc_Zero
 244              	.LVL18:
  74:Src/motion.c  ****     Straight_Calc_Zero();
 245              		.loc 1 74 0
 246 0034 FFF7FEFF 		bl	Straight_Calc_Zero
 247              	.LVL19:
  75:Src/motion.c  ****     HAL_Delay(1500);
 248              		.loc 1 75 0
 249 0038 40F2DC50 		movw	r0, #1500
 250 003c FFF7FEFF 		bl	HAL_Delay
 251              	.LVL20:
  76:Src/motion.c  ****     Output_Buzzer(HZ_C_H);
 252              		.loc 1 76 0
 253 0040 4C20     		movs	r0, #76
 254 0042 FFF7FEFF 		bl	Output_Buzzer
 255              	.LVL21:
  77:Src/motion.c  ****     flag.yawrate = ON;
 256              		.loc 1 77 0
 257 0046 0123     		movs	r3, #1
 258 0048 A370     		strb	r3, [r4, #2]
  78:Src/motion.c  ****     flag.straight = ON;
 259              		.loc 1 78 0
 260 004a 6370     		strb	r3, [r4, #1]
 261              	.L18:
  79:Src/motion.c  ****     while(1){
  80:Src/motion.c  ****         if(Push()==ON){
 262              		.loc 1 80 0
 263 004c FFF7FEFF 		bl	Push
 264              	.LVL22:
 265 0050 0128     		cmp	r0, #1
 266 0052 FBD1     		bne	.L18
  81:Src/motion.c  ****             flag.yawrate = OFF;
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s 			page 7


 267              		.loc 1 81 0
 268 0054 034B     		ldr	r3, .L20
 269 0056 0022     		movs	r2, #0
 270 0058 9A70     		strb	r2, [r3, #2]
  82:Src/motion.c  ****             flag.straight = OFF;
 271              		.loc 1 82 0
 272 005a 5A70     		strb	r2, [r3, #1]
  83:Src/motion.c  ****             Output_Buzzer(HZ_A);
 273              		.loc 1 83 0
 274 005c 5B20     		movs	r0, #91
 275 005e FFF7FEFF 		bl	Output_Buzzer
 276              	.LVL23:
  84:Src/motion.c  ****             break;
  85:Src/motion.c  ****         }
  86:Src/motion.c  ****     }
  87:Src/motion.c  **** }
 277              		.loc 1 87 0
 278 0062 10BD     		pop	{r4, pc}
 279              	.L21:
 280              		.align	2
 281              	.L20:
 282 0064 00000000 		.word	flag
 283 0068 00000000 		.word	sensor
 284              		.cfi_endproc
 285              	.LFE128:
 287              		.section	.text.Normal_Straight,"ax",%progbits
 288              		.align	1
 289              		.global	Normal_Straight
 290              		.syntax unified
 291              		.thumb
 292              		.thumb_func
 293              		.fpu fpv4-sp-d16
 295              	Normal_Straight:
 296              	.LFB129:
  88:Src/motion.c  **** 
  89:Src/motion.c  **** 
  90:Src/motion.c  **** /****************************************************************************************
  91:Src/motion.c  ****  * outline  : straight run one block by feadbuck control
  92:Src/motion.c  ****  * argument : void
  93:Src/motion.c  ****  * return   : void
  94:Src/motion.c  **** ********************************************************************************************/
  95:Src/motion.c  **** void Normal_Straight(void){
 297              		.loc 1 95 0
 298              		.cfi_startproc
 299              		@ args = 0, pretend = 0, frame = 0
 300              		@ frame_needed = 0, uses_anonymous_args = 0
 301 0000 38B5     		push	{r3, r4, r5, lr}
 302              	.LCFI3:
 303              		.cfi_def_cfa_offset 16
 304              		.cfi_offset 3, -16
 305              		.cfi_offset 4, -12
 306              		.cfi_offset 5, -8
 307              		.cfi_offset 14, -4
  96:Src/motion.c  ****     flag.ir_led = ON;
 308              		.loc 1 96 0
 309 0002 174B     		ldr	r3, .L27
 310 0004 0122     		movs	r2, #1
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s 			page 8


 311 0006 5A71     		strb	r2, [r3, #5]
 312              	.L23:
  97:Src/motion.c  ****     while(1){
  98:Src/motion.c  ****         if(sensor.wall[0]==true && sensor.wall[3]==true){
 313              		.loc 1 98 0
 314 0008 164B     		ldr	r3, .L27+4
 315 000a 9B7E     		ldrb	r3, [r3, #26]	@ zero_extendqisi2
 316 000c 012B     		cmp	r3, #1
 317 000e FBD1     		bne	.L23
 318              		.loc 1 98 0 is_stmt 0 discriminator 1
 319 0010 144B     		ldr	r3, .L27+4
 320 0012 5B7F     		ldrb	r3, [r3, #29]	@ zero_extendqisi2
 321 0014 012B     		cmp	r3, #1
 322 0016 F7D1     		bne	.L23
  99:Src/motion.c  ****             Output_Buzzer(HZ_C_H);
 323              		.loc 1 99 0 is_stmt 1
 324 0018 4C20     		movs	r0, #76
 325 001a FFF7FEFF 		bl	Output_Buzzer
 326              	.LVL24:
 100:Src/motion.c  ****             break;
 101:Src/motion.c  ****         }
 102:Src/motion.c  ****     }
 103:Src/motion.c  ****     flag.ir_led = OFF;
 327              		.loc 1 103 0
 328 001e 104D     		ldr	r5, .L27
 329 0020 0024     		movs	r4, #0
 330 0022 6C71     		strb	r4, [r5, #5]
 104:Src/motion.c  ****     HAL_Delay(500);
 331              		.loc 1 104 0
 332 0024 4FF4FA70 		mov	r0, #500
 333 0028 FFF7FEFF 		bl	HAL_Delay
 334              	.LVL25:
 105:Src/motion.c  ****     Straight_Calc_fb(180,0,0);
 335              		.loc 1 105 0
 336 002c 2246     		mov	r2, r4
 337 002e 2146     		mov	r1, r4
 338 0030 B420     		movs	r0, #180
 339 0032 FFF7FEFF 		bl	Straight_Calc_fb
 340              	.LVL26:
 106:Src/motion.c  ****     HAL_Delay(1000);
 341              		.loc 1 106 0
 342 0036 4FF47A70 		mov	r0, #1000
 343 003a FFF7FEFF 		bl	HAL_Delay
 344              	.LVL27:
 107:Src/motion.c  ****     Output_Buzzer(HZ_C_H);
 345              		.loc 1 107 0
 346 003e 4C20     		movs	r0, #76
 347 0040 FFF7FEFF 		bl	Output_Buzzer
 348              	.LVL28:
 108:Src/motion.c  ****     flag.straight = ON;
 349              		.loc 1 108 0
 350 0044 0123     		movs	r3, #1
 351 0046 6B70     		strb	r3, [r5, #1]
 352              	.L25:
 109:Src/motion.c  ****     while(1){
 110:Src/motion.c  ****         if(Push()==ON){
 353              		.loc 1 110 0
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s 			page 9


 354 0048 FFF7FEFF 		bl	Push
 355              	.LVL29:
 356 004c 0128     		cmp	r0, #1
 357 004e FBD1     		bne	.L25
 111:Src/motion.c  ****             flag.straight = OFF;
 358              		.loc 1 111 0
 359 0050 034B     		ldr	r3, .L27
 360 0052 0022     		movs	r2, #0
 361 0054 5A70     		strb	r2, [r3, #1]
 112:Src/motion.c  ****             Output_Buzzer(HZ_A);
 362              		.loc 1 112 0
 363 0056 5B20     		movs	r0, #91
 364 0058 FFF7FEFF 		bl	Output_Buzzer
 365              	.LVL30:
 113:Src/motion.c  ****             break;
 114:Src/motion.c  ****         }
 115:Src/motion.c  ****     }
 116:Src/motion.c  **** }
 366              		.loc 1 116 0
 367 005c 38BD     		pop	{r3, r4, r5, pc}
 368              	.L28:
 369 005e 00BF     		.align	2
 370              	.L27:
 371 0060 00000000 		.word	flag
 372 0064 00000000 		.word	sensor
 373              		.cfi_endproc
 374              	.LFE129:
 376              		.section	.text.Straight_Start,"ax",%progbits
 377              		.align	1
 378              		.global	Straight_Start
 379              		.syntax unified
 380              		.thumb
 381              		.thumb_func
 382              		.fpu fpv4-sp-d16
 384              	Straight_Start:
 385              	.LFB130:
 117:Src/motion.c  **** 
 118:Src/motion.c  **** 
 119:Src/motion.c  **** /****************************************************************************************
 120:Src/motion.c  ****  * outline  : straight one block by encoder and gyro
 121:Src/motion.c  ****  * argument : void
 122:Src/motion.c  ****  * return   : void
 123:Src/motion.c  **** ********************************************************************************************/
 124:Src/motion.c  **** void Straight_Start(void){
 386              		.loc 1 124 0
 387              		.cfi_startproc
 388              		@ args = 0, pretend = 0, frame = 0
 389              		@ frame_needed = 0, uses_anonymous_args = 0
 390 0000 08B5     		push	{r3, lr}
 391              	.LCFI4:
 392              		.cfi_def_cfa_offset 8
 393              		.cfi_offset 3, -8
 394              		.cfi_offset 14, -4
 125:Src/motion.c  ****     Straight_Calc_fb(135,0,0);
 395              		.loc 1 125 0
 396 0002 0022     		movs	r2, #0
 397 0004 1146     		mov	r1, r2
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s 			page 10


 398 0006 8720     		movs	r0, #135
 399 0008 FFF7FEFF 		bl	Straight_Calc_fb
 400              	.LVL31:
 126:Src/motion.c  ****     Yawrate_Calc_Zero();
 401              		.loc 1 126 0
 402 000c FFF7FEFF 		bl	Yawrate_Calc_Zero
 403              	.LVL32:
 127:Src/motion.c  ****     flag.straight = ON;
 404              		.loc 1 127 0
 405 0010 034B     		ldr	r3, .L31
 406 0012 0122     		movs	r2, #1
 407 0014 5A70     		strb	r2, [r3, #1]
 128:Src/motion.c  ****     flag.yawrate = ON;
 408              		.loc 1 128 0
 409 0016 9A70     		strb	r2, [r3, #2]
 129:Src/motion.c  ****     flag.wall = OFF;
 410              		.loc 1 129 0
 411 0018 0022     		movs	r2, #0
 412 001a DA72     		strb	r2, [r3, #11]
 130:Src/motion.c  **** }
 413              		.loc 1 130 0
 414 001c 08BD     		pop	{r3, pc}
 415              	.L32:
 416 001e 00BF     		.align	2
 417              	.L31:
 418 0020 00000000 		.word	flag
 419              		.cfi_endproc
 420              	.LFE130:
 422              		.section	.text.Straight,"ax",%progbits
 423              		.align	1
 424              		.global	Straight
 425              		.syntax unified
 426              		.thumb
 427              		.thumb_func
 428              		.fpu fpv4-sp-d16
 430              	Straight:
 431              	.LFB131:
 131:Src/motion.c  **** 
 132:Src/motion.c  **** void Straight(void){
 432              		.loc 1 132 0
 433              		.cfi_startproc
 434              		@ args = 0, pretend = 0, frame = 0
 435              		@ frame_needed = 0, uses_anonymous_args = 0
 436 0000 08B5     		push	{r3, lr}
 437              	.LCFI5:
 438              		.cfi_def_cfa_offset 8
 439              		.cfi_offset 3, -8
 440              		.cfi_offset 14, -4
 133:Src/motion.c  ****     Straight_Calc_fb(180,0,0);
 441              		.loc 1 133 0
 442 0002 0022     		movs	r2, #0
 443 0004 1146     		mov	r1, r2
 444 0006 B420     		movs	r0, #180
 445 0008 FFF7FEFF 		bl	Straight_Calc_fb
 446              	.LVL33:
 134:Src/motion.c  ****     Yawrate_Calc_Zero();
 447              		.loc 1 134 0
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s 			page 11


 448 000c FFF7FEFF 		bl	Yawrate_Calc_Zero
 449              	.LVL34:
 135:Src/motion.c  ****     flag.straight = ON;
 450              		.loc 1 135 0
 451 0010 024B     		ldr	r3, .L35
 452 0012 0122     		movs	r2, #1
 453 0014 5A70     		strb	r2, [r3, #1]
 136:Src/motion.c  ****     flag.yawrate = ON;
 454              		.loc 1 136 0
 455 0016 9A70     		strb	r2, [r3, #2]
 137:Src/motion.c  ****     flag.wall = ON;
 456              		.loc 1 137 0
 457 0018 DA72     		strb	r2, [r3, #11]
 138:Src/motion.c  **** }
 458              		.loc 1 138 0
 459 001a 08BD     		pop	{r3, pc}
 460              	.L36:
 461              		.align	2
 462              	.L35:
 463 001c 00000000 		.word	flag
 464              		.cfi_endproc
 465              	.LFE131:
 467              		.section	.text.Straight_HalF,"ax",%progbits
 468              		.align	1
 469              		.global	Straight_HalF
 470              		.syntax unified
 471              		.thumb
 472              		.thumb_func
 473              		.fpu fpv4-sp-d16
 475              	Straight_HalF:
 476              	.LFB132:
 139:Src/motion.c  **** 
 140:Src/motion.c  **** void Straight_HalF(void){
 477              		.loc 1 140 0
 478              		.cfi_startproc
 479              		@ args = 0, pretend = 0, frame = 0
 480              		@ frame_needed = 0, uses_anonymous_args = 0
 481 0000 08B5     		push	{r3, lr}
 482              	.LCFI6:
 483              		.cfi_def_cfa_offset 8
 484              		.cfi_offset 3, -8
 485              		.cfi_offset 14, -4
 141:Src/motion.c  ****     Straight_Calc_fb(90,0,0);
 486              		.loc 1 141 0
 487 0002 0022     		movs	r2, #0
 488 0004 1146     		mov	r1, r2
 489 0006 5A20     		movs	r0, #90
 490 0008 FFF7FEFF 		bl	Straight_Calc_fb
 491              	.LVL35:
 142:Src/motion.c  ****     Yawrate_Calc_Zero();
 492              		.loc 1 142 0
 493 000c FFF7FEFF 		bl	Yawrate_Calc_Zero
 494              	.LVL36:
 143:Src/motion.c  ****     flag.straight = ON;
 495              		.loc 1 143 0
 496 0010 024B     		ldr	r3, .L39
 497 0012 0122     		movs	r2, #1
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s 			page 12


 498 0014 5A70     		strb	r2, [r3, #1]
 144:Src/motion.c  ****     flag.yawrate = ON;
 499              		.loc 1 144 0
 500 0016 9A70     		strb	r2, [r3, #2]
 145:Src/motion.c  **** }
 501              		.loc 1 145 0
 502 0018 08BD     		pop	{r3, pc}
 503              	.L40:
 504 001a 00BF     		.align	2
 505              	.L39:
 506 001c 00000000 		.word	flag
 507              		.cfi_endproc
 508              	.LFE132:
 510              		.section	.text.Turn_Half,"ax",%progbits
 511              		.align	1
 512              		.global	Turn_Half
 513              		.syntax unified
 514              		.thumb
 515              		.thumb_func
 516              		.fpu fpv4-sp-d16
 518              	Turn_Half:
 519              	.LFB133:
 146:Src/motion.c  **** 
 147:Src/motion.c  **** void Turn_Half(void){
 520              		.loc 1 147 0
 521              		.cfi_startproc
 522              		@ args = 0, pretend = 0, frame = 0
 523              		@ frame_needed = 0, uses_anonymous_args = 0
 524 0000 38B5     		push	{r3, r4, r5, lr}
 525              	.LCFI7:
 526              		.cfi_def_cfa_offset 16
 527              		.cfi_offset 3, -16
 528              		.cfi_offset 4, -12
 529              		.cfi_offset 5, -8
 530              		.cfi_offset 14, -4
 148:Src/motion.c  ****     flag.dir = LEFT;
 531              		.loc 1 148 0
 532 0002 064C     		ldr	r4, .L43
 533 0004 0125     		movs	r5, #1
 534 0006 2581     		strh	r5, [r4, #8]	@ movhi
 149:Src/motion.c  ****     Yawrate_Calc_fb(180,0,0);
 535              		.loc 1 149 0
 536 0008 0022     		movs	r2, #0
 537 000a 1146     		mov	r1, r2
 538 000c B420     		movs	r0, #180
 539 000e FFF7FEFF 		bl	Yawrate_Calc_fb
 540              	.LVL37:
 150:Src/motion.c  ****     Straight_Calc_Zero();
 541              		.loc 1 150 0
 542 0012 FFF7FEFF 		bl	Straight_Calc_Zero
 543              	.LVL38:
 151:Src/motion.c  ****     flag.yawrate = ON;
 544              		.loc 1 151 0
 545 0016 A570     		strb	r5, [r4, #2]
 152:Src/motion.c  ****     flag.straight = ON;
 546              		.loc 1 152 0
 547 0018 6570     		strb	r5, [r4, #1]
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s 			page 13


 153:Src/motion.c  **** }
 548              		.loc 1 153 0
 549 001a 38BD     		pop	{r3, r4, r5, pc}
 550              	.L44:
 551              		.align	2
 552              	.L43:
 553 001c 00000000 		.word	flag
 554              		.cfi_endproc
 555              	.LFE133:
 557              		.section	.text.Turn_Quarter_Left,"ax",%progbits
 558              		.align	1
 559              		.global	Turn_Quarter_Left
 560              		.syntax unified
 561              		.thumb
 562              		.thumb_func
 563              		.fpu fpv4-sp-d16
 565              	Turn_Quarter_Left:
 566              	.LFB134:
 154:Src/motion.c  **** 
 155:Src/motion.c  **** void Turn_Quarter_Left(void){
 567              		.loc 1 155 0
 568              		.cfi_startproc
 569              		@ args = 0, pretend = 0, frame = 0
 570              		@ frame_needed = 0, uses_anonymous_args = 0
 571 0000 38B5     		push	{r3, r4, r5, lr}
 572              	.LCFI8:
 573              		.cfi_def_cfa_offset 16
 574              		.cfi_offset 3, -16
 575              		.cfi_offset 4, -12
 576              		.cfi_offset 5, -8
 577              		.cfi_offset 14, -4
 156:Src/motion.c  ****     flag.dir = LEFT;
 578              		.loc 1 156 0
 579 0002 064C     		ldr	r4, .L47
 580 0004 0125     		movs	r5, #1
 581 0006 2581     		strh	r5, [r4, #8]	@ movhi
 157:Src/motion.c  ****     Yawrate_Calc_fb(90,0,0);
 582              		.loc 1 157 0
 583 0008 0022     		movs	r2, #0
 584 000a 1146     		mov	r1, r2
 585 000c 5A20     		movs	r0, #90
 586 000e FFF7FEFF 		bl	Yawrate_Calc_fb
 587              	.LVL39:
 158:Src/motion.c  ****     Straight_Calc_Zero();
 588              		.loc 1 158 0
 589 0012 FFF7FEFF 		bl	Straight_Calc_Zero
 590              	.LVL40:
 159:Src/motion.c  ****     flag.yawrate = ON;
 591              		.loc 1 159 0
 592 0016 A570     		strb	r5, [r4, #2]
 160:Src/motion.c  ****     flag.straight = ON;
 593              		.loc 1 160 0
 594 0018 6570     		strb	r5, [r4, #1]
 161:Src/motion.c  **** }
 595              		.loc 1 161 0
 596 001a 38BD     		pop	{r3, r4, r5, pc}
 597              	.L48:
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s 			page 14


 598              		.align	2
 599              	.L47:
 600 001c 00000000 		.word	flag
 601              		.cfi_endproc
 602              	.LFE134:
 604              		.section	.text.Turn_Quarter_Right,"ax",%progbits
 605              		.align	1
 606              		.global	Turn_Quarter_Right
 607              		.syntax unified
 608              		.thumb
 609              		.thumb_func
 610              		.fpu fpv4-sp-d16
 612              	Turn_Quarter_Right:
 613              	.LFB135:
 162:Src/motion.c  **** 
 163:Src/motion.c  **** void Turn_Quarter_Right(void){
 614              		.loc 1 163 0
 615              		.cfi_startproc
 616              		@ args = 0, pretend = 0, frame = 0
 617              		@ frame_needed = 0, uses_anonymous_args = 0
 618 0000 10B5     		push	{r4, lr}
 619              	.LCFI9:
 620              		.cfi_def_cfa_offset 8
 621              		.cfi_offset 4, -8
 622              		.cfi_offset 14, -4
 164:Src/motion.c  ****     flag.dir = RIGHT;
 623              		.loc 1 164 0
 624 0002 074C     		ldr	r4, .L51
 625 0004 4FF6FF73 		movw	r3, #65535
 626 0008 2381     		strh	r3, [r4, #8]	@ movhi
 165:Src/motion.c  ****     Yawrate_Calc_fb(90,0,0);
 627              		.loc 1 165 0
 628 000a 0022     		movs	r2, #0
 629 000c 1146     		mov	r1, r2
 630 000e 5A20     		movs	r0, #90
 631 0010 FFF7FEFF 		bl	Yawrate_Calc_fb
 632              	.LVL41:
 166:Src/motion.c  ****     Straight_Calc_Zero();
 633              		.loc 1 166 0
 634 0014 FFF7FEFF 		bl	Straight_Calc_Zero
 635              	.LVL42:
 167:Src/motion.c  ****     flag.yawrate = ON;
 636              		.loc 1 167 0
 637 0018 0123     		movs	r3, #1
 638 001a A370     		strb	r3, [r4, #2]
 168:Src/motion.c  ****     flag.straight = ON;
 639              		.loc 1 168 0
 640 001c 6370     		strb	r3, [r4, #1]
 169:Src/motion.c  **** }
 641              		.loc 1 169 0
 642 001e 10BD     		pop	{r4, pc}
 643              	.L52:
 644              		.align	2
 645              	.L51:
 646 0020 00000000 		.word	flag
 647              		.cfi_endproc
 648              	.LFE135:
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s 			page 15


 650              		.section	.text.Back,"ax",%progbits
 651              		.align	1
 652              		.global	Back
 653              		.syntax unified
 654              		.thumb
 655              		.thumb_func
 656              		.fpu fpv4-sp-d16
 658              	Back:
 659              	.LFB136:
 170:Src/motion.c  **** 
 171:Src/motion.c  **** void Back(void){
 660              		.loc 1 171 0
 661              		.cfi_startproc
 662              		@ args = 0, pretend = 0, frame = 0
 663              		@ frame_needed = 0, uses_anonymous_args = 0
 664 0000 08B5     		push	{r3, lr}
 665              	.LCFI10:
 666              		.cfi_def_cfa_offset 8
 667              		.cfi_offset 3, -8
 668              		.cfi_offset 14, -4
 172:Src/motion.c  ****     Straight_Calc_fb(-50,0,0);
 669              		.loc 1 172 0
 670 0002 0022     		movs	r2, #0
 671 0004 1146     		mov	r1, r2
 672 0006 6FF03100 		mvn	r0, #49
 673 000a FFF7FEFF 		bl	Straight_Calc_fb
 674              	.LVL43:
 173:Src/motion.c  ****     Yawrate_Calc_Zero();
 675              		.loc 1 173 0
 676 000e FFF7FEFF 		bl	Yawrate_Calc_Zero
 677              	.LVL44:
 174:Src/motion.c  ****     flag.straight = ON;
 678              		.loc 1 174 0
 679 0012 034B     		ldr	r3, .L55
 680 0014 0122     		movs	r2, #1
 681 0016 5A70     		strb	r2, [r3, #1]
 175:Src/motion.c  ****     flag.yawrate = ON;
 682              		.loc 1 175 0
 683 0018 9A70     		strb	r2, [r3, #2]
 176:Src/motion.c  ****     flag.wall=OFF;
 684              		.loc 1 176 0
 685 001a 0022     		movs	r2, #0
 686 001c DA72     		strb	r2, [r3, #11]
 177:Src/motion.c  **** }
 687              		.loc 1 177 0
 688 001e 08BD     		pop	{r3, pc}
 689              	.L56:
 690              		.align	2
 691              	.L55:
 692 0020 00000000 		.word	flag
 693              		.cfi_endproc
 694              	.LFE136:
 696              		.section	.text.Straight_Check,"ax",%progbits
 697              		.align	1
 698              		.global	Straight_Check
 699              		.syntax unified
 700              		.thumb
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s 			page 16


 701              		.thumb_func
 702              		.fpu fpv4-sp-d16
 704              	Straight_Check:
 705              	.LFB137:
 178:Src/motion.c  **** 
 179:Src/motion.c  **** void Straight_Check(void){
 706              		.loc 1 179 0
 707              		.cfi_startproc
 708              		@ args = 0, pretend = 0, frame = 0
 709              		@ frame_needed = 0, uses_anonymous_args = 0
 710 0000 08B5     		push	{r3, lr}
 711              	.LCFI11:
 712              		.cfi_def_cfa_offset 8
 713              		.cfi_offset 3, -8
 714              		.cfi_offset 14, -4
 180:Src/motion.c  ****     Straight_Calc_fb(1080,0,0);
 715              		.loc 1 180 0
 716 0002 0022     		movs	r2, #0
 717 0004 1146     		mov	r1, r2
 718 0006 4FF48760 		mov	r0, #1080
 719 000a FFF7FEFF 		bl	Straight_Calc_fb
 720              	.LVL45:
 181:Src/motion.c  ****     Yawrate_Calc_Zero();
 721              		.loc 1 181 0
 722 000e FFF7FEFF 		bl	Yawrate_Calc_Zero
 723              	.LVL46:
 182:Src/motion.c  ****     HAL_Delay(10);
 724              		.loc 1 182 0
 725 0012 0A20     		movs	r0, #10
 726 0014 FFF7FEFF 		bl	HAL_Delay
 727              	.LVL47:
 183:Src/motion.c  ****     Output_Buzzer(HZ_C_H);
 728              		.loc 1 183 0
 729 0018 4C20     		movs	r0, #76
 730 001a FFF7FEFF 		bl	Output_Buzzer
 731              	.LVL48:
 184:Src/motion.c  ****     flag.straight = ON;
 732              		.loc 1 184 0
 733 001e 034B     		ldr	r3, .L59
 734 0020 0122     		movs	r2, #1
 735 0022 5A70     		strb	r2, [r3, #1]
 185:Src/motion.c  ****     flag.wall=ON;
 736              		.loc 1 185 0
 737 0024 DA72     		strb	r2, [r3, #11]
 186:Src/motion.c  ****     flag.yawrate = ON;
 738              		.loc 1 186 0
 739 0026 9A70     		strb	r2, [r3, #2]
 187:Src/motion.c  **** }
 740              		.loc 1 187 0
 741 0028 08BD     		pop	{r3, pc}
 742              	.L60:
 743 002a 00BF     		.align	2
 744              	.L59:
 745 002c 00000000 		.word	flag
 746              		.cfi_endproc
 747              	.LFE137:
 749              		.section	.text.Motion_Start,"ax",%progbits
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s 			page 17


 750              		.align	1
 751              		.global	Motion_Start
 752              		.syntax unified
 753              		.thumb
 754              		.thumb_func
 755              		.fpu fpv4-sp-d16
 757              	Motion_Start:
 758              	.LFB138:
 188:Src/motion.c  **** 
 189:Src/motion.c  **** void Motion_Start(void){
 759              		.loc 1 189 0
 760              		.cfi_startproc
 761              		@ args = 0, pretend = 0, frame = 0
 762              		@ frame_needed = 0, uses_anonymous_args = 0
 763 0000 08B5     		push	{r3, lr}
 764              	.LCFI12:
 765              		.cfi_def_cfa_offset 8
 766              		.cfi_offset 3, -8
 767              		.cfi_offset 14, -4
 190:Src/motion.c  ****     Back();
 768              		.loc 1 190 0
 769 0002 FFF7FEFF 		bl	Back
 770              	.LVL49:
 771              	.L62:
 191:Src/motion.c  ****     while(flag.accel==ON || flag.straight==ON){}
 772              		.loc 1 191 0 discriminator 3
 773 0006 0F4B     		ldr	r3, .L67
 774 0008 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 775 000a DBB2     		uxtb	r3, r3
 776 000c 012B     		cmp	r3, #1
 777 000e FAD0     		beq	.L62
 778              		.loc 1 191 0 is_stmt 0 discriminator 2
 779 0010 0C4B     		ldr	r3, .L67
 780 0012 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 781 0014 DBB2     		uxtb	r3, r3
 782 0016 012B     		cmp	r3, #1
 783 0018 F5D0     		beq	.L62
 192:Src/motion.c  ****     HAL_Delay(500);
 784              		.loc 1 192 0 is_stmt 1
 785 001a 4FF4FA70 		mov	r0, #500
 786 001e FFF7FEFF 		bl	HAL_Delay
 787              	.LVL50:
 193:Src/motion.c  ****     Straight_Start();
 788              		.loc 1 193 0
 789 0022 FFF7FEFF 		bl	Straight_Start
 790              	.LVL51:
 791              	.L64:
 194:Src/motion.c  ****     while(flag.accel==ON || flag.straight==ON){}
 792              		.loc 1 194 0 discriminator 3
 793 0026 074B     		ldr	r3, .L67
 794 0028 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 795 002a DBB2     		uxtb	r3, r3
 796 002c 012B     		cmp	r3, #1
 797 002e FAD0     		beq	.L64
 798              		.loc 1 194 0 is_stmt 0 discriminator 2
 799 0030 044B     		ldr	r3, .L67
 800 0032 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s 			page 18


 801 0034 DBB2     		uxtb	r3, r3
 802 0036 012B     		cmp	r3, #1
 803 0038 F5D0     		beq	.L64
 195:Src/motion.c  ****     Output_Buzzer(HZ_C_H);
 804              		.loc 1 195 0 is_stmt 1
 805 003a 4C20     		movs	r0, #76
 806 003c FFF7FEFF 		bl	Output_Buzzer
 807              	.LVL52:
 196:Src/motion.c  **** }
 808              		.loc 1 196 0
 809 0040 08BD     		pop	{r3, pc}
 810              	.L68:
 811 0042 00BF     		.align	2
 812              	.L67:
 813 0044 00000000 		.word	flag
 814              		.cfi_endproc
 815              	.LFE138:
 817              		.section	.text.Motion_Straight,"ax",%progbits
 818              		.align	1
 819              		.global	Motion_Straight
 820              		.syntax unified
 821              		.thumb
 822              		.thumb_func
 823              		.fpu fpv4-sp-d16
 825              	Motion_Straight:
 826              	.LFB139:
 197:Src/motion.c  **** 
 198:Src/motion.c  **** void Motion_Straight(void){
 827              		.loc 1 198 0
 828              		.cfi_startproc
 829              		@ args = 0, pretend = 0, frame = 0
 830              		@ frame_needed = 0, uses_anonymous_args = 0
 831 0000 08B5     		push	{r3, lr}
 832              	.LCFI13:
 833              		.cfi_def_cfa_offset 8
 834              		.cfi_offset 3, -8
 835              		.cfi_offset 14, -4
 199:Src/motion.c  ****     Straight();
 836              		.loc 1 199 0
 837 0002 FFF7FEFF 		bl	Straight
 838              	.LVL53:
 839              	.L70:
 200:Src/motion.c  ****     while(flag.accel==ON || flag.straight==ON){}
 840              		.loc 1 200 0 discriminator 3
 841 0006 074B     		ldr	r3, .L73
 842 0008 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 843 000a DBB2     		uxtb	r3, r3
 844 000c 012B     		cmp	r3, #1
 845 000e FAD0     		beq	.L70
 846              		.loc 1 200 0 is_stmt 0 discriminator 2
 847 0010 044B     		ldr	r3, .L73
 848 0012 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 849 0014 DBB2     		uxtb	r3, r3
 850 0016 012B     		cmp	r3, #1
 851 0018 F5D0     		beq	.L70
 201:Src/motion.c  ****     Output_Buzzer(HZ_C_H);
 852              		.loc 1 201 0 is_stmt 1
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s 			page 19


 853 001a 4C20     		movs	r0, #76
 854 001c FFF7FEFF 		bl	Output_Buzzer
 855              	.LVL54:
 202:Src/motion.c  **** }
 856              		.loc 1 202 0
 857 0020 08BD     		pop	{r3, pc}
 858              	.L74:
 859 0022 00BF     		.align	2
 860              	.L73:
 861 0024 00000000 		.word	flag
 862              		.cfi_endproc
 863              	.LFE139:
 865              		.section	.text.Motion_Left,"ax",%progbits
 866              		.align	1
 867              		.global	Motion_Left
 868              		.syntax unified
 869              		.thumb
 870              		.thumb_func
 871              		.fpu fpv4-sp-d16
 873              	Motion_Left:
 874              	.LFB140:
 203:Src/motion.c  **** 
 204:Src/motion.c  **** void Motion_Left(void){
 875              		.loc 1 204 0
 876              		.cfi_startproc
 877              		@ args = 0, pretend = 0, frame = 0
 878              		@ frame_needed = 0, uses_anonymous_args = 0
 879 0000 08B5     		push	{r3, lr}
 880              	.LCFI14:
 881              		.cfi_def_cfa_offset 8
 882              		.cfi_offset 3, -8
 883              		.cfi_offset 14, -4
 205:Src/motion.c  ****     Straight_HalF();
 884              		.loc 1 205 0
 885 0002 FFF7FEFF 		bl	Straight_HalF
 886              	.LVL55:
 887              	.L76:
 206:Src/motion.c  ****     while(flag.accel==ON || flag.straight==ON){}
 888              		.loc 1 206 0 discriminator 3
 889 0006 174B     		ldr	r3, .L83
 890 0008 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 891 000a DBB2     		uxtb	r3, r3
 892 000c 012B     		cmp	r3, #1
 893 000e FAD0     		beq	.L76
 894              		.loc 1 206 0 is_stmt 0 discriminator 2
 895 0010 144B     		ldr	r3, .L83
 896 0012 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 897 0014 DBB2     		uxtb	r3, r3
 898 0016 012B     		cmp	r3, #1
 899 0018 F5D0     		beq	.L76
 207:Src/motion.c  ****     HAL_Delay(500);
 900              		.loc 1 207 0 is_stmt 1
 901 001a 4FF4FA70 		mov	r0, #500
 902 001e FFF7FEFF 		bl	HAL_Delay
 903              	.LVL56:
 208:Src/motion.c  ****     Turn_Quarter_Left();
 904              		.loc 1 208 0
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s 			page 20


 905 0022 FFF7FEFF 		bl	Turn_Quarter_Left
 906              	.LVL57:
 907              	.L78:
 209:Src/motion.c  ****     while(flag.accel==ON || flag.straight==ON){}
 908              		.loc 1 209 0 discriminator 3
 909 0026 0F4B     		ldr	r3, .L83
 910 0028 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 911 002a DBB2     		uxtb	r3, r3
 912 002c 012B     		cmp	r3, #1
 913 002e FAD0     		beq	.L78
 914              		.loc 1 209 0 is_stmt 0 discriminator 2
 915 0030 0C4B     		ldr	r3, .L83
 916 0032 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 917 0034 DBB2     		uxtb	r3, r3
 918 0036 012B     		cmp	r3, #1
 919 0038 F5D0     		beq	.L78
 210:Src/motion.c  ****     HAL_Delay(500);
 920              		.loc 1 210 0 is_stmt 1
 921 003a 4FF4FA70 		mov	r0, #500
 922 003e FFF7FEFF 		bl	HAL_Delay
 923              	.LVL58:
 211:Src/motion.c  ****     Straight_HalF();
 924              		.loc 1 211 0
 925 0042 FFF7FEFF 		bl	Straight_HalF
 926              	.LVL59:
 927              	.L80:
 212:Src/motion.c  ****     while(flag.accel==ON || flag.straight==ON){}
 928              		.loc 1 212 0 discriminator 3
 929 0046 074B     		ldr	r3, .L83
 930 0048 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 931 004a DBB2     		uxtb	r3, r3
 932 004c 012B     		cmp	r3, #1
 933 004e FAD0     		beq	.L80
 934              		.loc 1 212 0 is_stmt 0 discriminator 2
 935 0050 044B     		ldr	r3, .L83
 936 0052 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 937 0054 DBB2     		uxtb	r3, r3
 938 0056 012B     		cmp	r3, #1
 939 0058 F5D0     		beq	.L80
 213:Src/motion.c  ****     Output_Buzzer(HZ_C_H);
 940              		.loc 1 213 0 is_stmt 1
 941 005a 4C20     		movs	r0, #76
 942 005c FFF7FEFF 		bl	Output_Buzzer
 943              	.LVL60:
 214:Src/motion.c  **** }
 944              		.loc 1 214 0
 945 0060 08BD     		pop	{r3, pc}
 946              	.L84:
 947 0062 00BF     		.align	2
 948              	.L83:
 949 0064 00000000 		.word	flag
 950              		.cfi_endproc
 951              	.LFE140:
 953              		.section	.text.Motion_Right,"ax",%progbits
 954              		.align	1
 955              		.global	Motion_Right
 956              		.syntax unified
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s 			page 21


 957              		.thumb
 958              		.thumb_func
 959              		.fpu fpv4-sp-d16
 961              	Motion_Right:
 962              	.LFB141:
 215:Src/motion.c  **** 
 216:Src/motion.c  **** void Motion_Right(void){
 963              		.loc 1 216 0
 964              		.cfi_startproc
 965              		@ args = 0, pretend = 0, frame = 0
 966              		@ frame_needed = 0, uses_anonymous_args = 0
 967 0000 08B5     		push	{r3, lr}
 968              	.LCFI15:
 969              		.cfi_def_cfa_offset 8
 970              		.cfi_offset 3, -8
 971              		.cfi_offset 14, -4
 217:Src/motion.c  ****     Straight_HalF();
 972              		.loc 1 217 0
 973 0002 FFF7FEFF 		bl	Straight_HalF
 974              	.LVL61:
 975              	.L86:
 218:Src/motion.c  ****     while(flag.accel==ON || flag.straight==ON){}
 976              		.loc 1 218 0 discriminator 3
 977 0006 174B     		ldr	r3, .L93
 978 0008 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 979 000a DBB2     		uxtb	r3, r3
 980 000c 012B     		cmp	r3, #1
 981 000e FAD0     		beq	.L86
 982              		.loc 1 218 0 is_stmt 0 discriminator 2
 983 0010 144B     		ldr	r3, .L93
 984 0012 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 985 0014 DBB2     		uxtb	r3, r3
 986 0016 012B     		cmp	r3, #1
 987 0018 F5D0     		beq	.L86
 219:Src/motion.c  ****     HAL_Delay(500);
 988              		.loc 1 219 0 is_stmt 1
 989 001a 4FF4FA70 		mov	r0, #500
 990 001e FFF7FEFF 		bl	HAL_Delay
 991              	.LVL62:
 220:Src/motion.c  ****     Turn_Quarter_Right();
 992              		.loc 1 220 0
 993 0022 FFF7FEFF 		bl	Turn_Quarter_Right
 994              	.LVL63:
 995              	.L88:
 221:Src/motion.c  ****     while(flag.accel==ON || flag.straight==ON){}
 996              		.loc 1 221 0 discriminator 3
 997 0026 0F4B     		ldr	r3, .L93
 998 0028 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 999 002a DBB2     		uxtb	r3, r3
 1000 002c 012B     		cmp	r3, #1
 1001 002e FAD0     		beq	.L88
 1002              		.loc 1 221 0 is_stmt 0 discriminator 2
 1003 0030 0C4B     		ldr	r3, .L93
 1004 0032 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1005 0034 DBB2     		uxtb	r3, r3
 1006 0036 012B     		cmp	r3, #1
 1007 0038 F5D0     		beq	.L88
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s 			page 22


 222:Src/motion.c  ****     HAL_Delay(500);
 1008              		.loc 1 222 0 is_stmt 1
 1009 003a 4FF4FA70 		mov	r0, #500
 1010 003e FFF7FEFF 		bl	HAL_Delay
 1011              	.LVL64:
 223:Src/motion.c  ****     Straight_HalF();
 1012              		.loc 1 223 0
 1013 0042 FFF7FEFF 		bl	Straight_HalF
 1014              	.LVL65:
 1015              	.L90:
 224:Src/motion.c  ****     while(flag.accel==ON || flag.straight==ON){}
 1016              		.loc 1 224 0 discriminator 3
 1017 0046 074B     		ldr	r3, .L93
 1018 0048 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1019 004a DBB2     		uxtb	r3, r3
 1020 004c 012B     		cmp	r3, #1
 1021 004e FAD0     		beq	.L90
 1022              		.loc 1 224 0 is_stmt 0 discriminator 2
 1023 0050 044B     		ldr	r3, .L93
 1024 0052 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1025 0054 DBB2     		uxtb	r3, r3
 1026 0056 012B     		cmp	r3, #1
 1027 0058 F5D0     		beq	.L90
 225:Src/motion.c  ****     Output_Buzzer(HZ_C_H);
 1028              		.loc 1 225 0 is_stmt 1
 1029 005a 4C20     		movs	r0, #76
 1030 005c FFF7FEFF 		bl	Output_Buzzer
 1031              	.LVL66:
 226:Src/motion.c  **** }
 1032              		.loc 1 226 0
 1033 0060 08BD     		pop	{r3, pc}
 1034              	.L94:
 1035 0062 00BF     		.align	2
 1036              	.L93:
 1037 0064 00000000 		.word	flag
 1038              		.cfi_endproc
 1039              	.LFE141:
 1041              		.section	.text.Motion_Uturn,"ax",%progbits
 1042              		.align	1
 1043              		.global	Motion_Uturn
 1044              		.syntax unified
 1045              		.thumb
 1046              		.thumb_func
 1047              		.fpu fpv4-sp-d16
 1049              	Motion_Uturn:
 1050              	.LFB142:
 227:Src/motion.c  **** 
 228:Src/motion.c  **** void Motion_Uturn(void){
 1051              		.loc 1 228 0
 1052              		.cfi_startproc
 1053              		@ args = 0, pretend = 0, frame = 0
 1054              		@ frame_needed = 0, uses_anonymous_args = 0
 1055 0000 08B5     		push	{r3, lr}
 1056              	.LCFI16:
 1057              		.cfi_def_cfa_offset 8
 1058              		.cfi_offset 3, -8
 1059              		.cfi_offset 14, -4
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s 			page 23


 229:Src/motion.c  ****     Straight_HalF();
 1060              		.loc 1 229 0
 1061 0002 FFF7FEFF 		bl	Straight_HalF
 1062              	.LVL67:
 1063              	.L96:
 230:Src/motion.c  ****     while( flag.accel==ON || flag.straight==ON ){}
 1064              		.loc 1 230 0 discriminator 3
 1065 0006 1D4B     		ldr	r3, .L105
 1066 0008 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1067 000a DBB2     		uxtb	r3, r3
 1068 000c 012B     		cmp	r3, #1
 1069 000e FAD0     		beq	.L96
 1070              		.loc 1 230 0 is_stmt 0 discriminator 2
 1071 0010 1A4B     		ldr	r3, .L105
 1072 0012 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1073 0014 DBB2     		uxtb	r3, r3
 1074 0016 012B     		cmp	r3, #1
 1075 0018 F5D0     		beq	.L96
 231:Src/motion.c  ****     Turn_Half();
 1076              		.loc 1 231 0 is_stmt 1
 1077 001a FFF7FEFF 		bl	Turn_Half
 1078              	.LVL68:
 1079              	.L98:
 232:Src/motion.c  ****     while(flag.accel==ON || flag.straight==ON){}
 1080              		.loc 1 232 0 discriminator 3
 1081 001e 174B     		ldr	r3, .L105
 1082 0020 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1083 0022 DBB2     		uxtb	r3, r3
 1084 0024 012B     		cmp	r3, #1
 1085 0026 FAD0     		beq	.L98
 1086              		.loc 1 232 0 is_stmt 0 discriminator 2
 1087 0028 144B     		ldr	r3, .L105
 1088 002a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1089 002c DBB2     		uxtb	r3, r3
 1090 002e 012B     		cmp	r3, #1
 1091 0030 F5D0     		beq	.L98
 233:Src/motion.c  ****     HAL_Delay(500);
 1092              		.loc 1 233 0 is_stmt 1
 1093 0032 4FF4FA70 		mov	r0, #500
 1094 0036 FFF7FEFF 		bl	HAL_Delay
 1095              	.LVL69:
 234:Src/motion.c  ****     Back();
 1096              		.loc 1 234 0
 1097 003a FFF7FEFF 		bl	Back
 1098              	.LVL70:
 1099              	.L100:
 235:Src/motion.c  ****     while(flag.accel==ON || flag.straight==ON){}
 1100              		.loc 1 235 0 discriminator 3
 1101 003e 0F4B     		ldr	r3, .L105
 1102 0040 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1103 0042 DBB2     		uxtb	r3, r3
 1104 0044 012B     		cmp	r3, #1
 1105 0046 FAD0     		beq	.L100
 1106              		.loc 1 235 0 is_stmt 0 discriminator 2
 1107 0048 0C4B     		ldr	r3, .L105
 1108 004a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1109 004c DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s 			page 24


 1110 004e 012B     		cmp	r3, #1
 1111 0050 F5D0     		beq	.L100
 236:Src/motion.c  ****     HAL_Delay(500);
 1112              		.loc 1 236 0 is_stmt 1
 1113 0052 4FF4FA70 		mov	r0, #500
 1114 0056 FFF7FEFF 		bl	HAL_Delay
 1115              	.LVL71:
 237:Src/motion.c  ****     Straight_Start();
 1116              		.loc 1 237 0
 1117 005a FFF7FEFF 		bl	Straight_Start
 1118              	.LVL72:
 1119              	.L102:
 238:Src/motion.c  ****     while(flag.accel==ON || flag.straight==ON){}
 1120              		.loc 1 238 0 discriminator 3
 1121 005e 074B     		ldr	r3, .L105
 1122 0060 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1123 0062 DBB2     		uxtb	r3, r3
 1124 0064 012B     		cmp	r3, #1
 1125 0066 FAD0     		beq	.L102
 1126              		.loc 1 238 0 is_stmt 0 discriminator 2
 1127 0068 044B     		ldr	r3, .L105
 1128 006a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1129 006c DBB2     		uxtb	r3, r3
 1130 006e 012B     		cmp	r3, #1
 1131 0070 F5D0     		beq	.L102
 239:Src/motion.c  ****     Output_Buzzer(HZ_C_H);
 1132              		.loc 1 239 0 is_stmt 1
 1133 0072 4C20     		movs	r0, #76
 1134 0074 FFF7FEFF 		bl	Output_Buzzer
 1135              	.LVL73:
 240:Src/motion.c  **** }
 1136              		.loc 1 240 0
 1137 0078 08BD     		pop	{r3, pc}
 1138              	.L106:
 1139 007a 00BF     		.align	2
 1140              	.L105:
 1141 007c 00000000 		.word	flag
 1142              		.cfi_endproc
 1143              	.LFE142:
 1145              		.section	.text.Motion_Goal,"ax",%progbits
 1146              		.align	1
 1147              		.global	Motion_Goal
 1148              		.syntax unified
 1149              		.thumb
 1150              		.thumb_func
 1151              		.fpu fpv4-sp-d16
 1153              	Motion_Goal:
 1154              	.LFB143:
 241:Src/motion.c  **** 
 242:Src/motion.c  **** void Motion_Goal(void){
 1155              		.loc 1 242 0
 1156              		.cfi_startproc
 1157              		@ args = 0, pretend = 0, frame = 0
 1158              		@ frame_needed = 0, uses_anonymous_args = 0
 1159 0000 08B5     		push	{r3, lr}
 1160              	.LCFI17:
 1161              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s 			page 25


 1162              		.cfi_offset 3, -8
 1163              		.cfi_offset 14, -4
 243:Src/motion.c  ****     Straight_HalF();
 1164              		.loc 1 243 0
 1165 0002 FFF7FEFF 		bl	Straight_HalF
 1166              	.LVL74:
 1167              	.L108:
 244:Src/motion.c  ****     while( flag.accel==ON || flag.straight==ON ){}
 1168              		.loc 1 244 0 discriminator 3
 1169 0006 074B     		ldr	r3, .L111
 1170 0008 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1171 000a DBB2     		uxtb	r3, r3
 1172 000c 012B     		cmp	r3, #1
 1173 000e FAD0     		beq	.L108
 1174              		.loc 1 244 0 is_stmt 0 discriminator 2
 1175 0010 044B     		ldr	r3, .L111
 1176 0012 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1177 0014 DBB2     		uxtb	r3, r3
 1178 0016 012B     		cmp	r3, #1
 1179 0018 F5D0     		beq	.L108
 245:Src/motion.c  ****     Output_Buzzer(HZ_C_H);
 1180              		.loc 1 245 0 is_stmt 1
 1181 001a 4C20     		movs	r0, #76
 1182 001c FFF7FEFF 		bl	Output_Buzzer
 1183              	.LVL75:
 246:Src/motion.c  **** }
 1184              		.loc 1 246 0
 1185 0020 08BD     		pop	{r3, pc}
 1186              	.L112:
 1187 0022 00BF     		.align	2
 1188              	.L111:
 1189 0024 00000000 		.word	flag
 1190              		.cfi_endproc
 1191              	.LFE143:
 1193              		.section	.text.Motion_Straight_Check,"ax",%progbits
 1194              		.align	1
 1195              		.global	Motion_Straight_Check
 1196              		.syntax unified
 1197              		.thumb
 1198              		.thumb_func
 1199              		.fpu fpv4-sp-d16
 1201              	Motion_Straight_Check:
 1202              	.LFB144:
 247:Src/motion.c  **** 
 248:Src/motion.c  **** void Motion_Straight_Check(void){
 1203              		.loc 1 248 0
 1204              		.cfi_startproc
 1205              		@ args = 0, pretend = 0, frame = 0
 1206              		@ frame_needed = 0, uses_anonymous_args = 0
 1207 0000 08B5     		push	{r3, lr}
 1208              	.LCFI18:
 1209              		.cfi_def_cfa_offset 8
 1210              		.cfi_offset 3, -8
 1211              		.cfi_offset 14, -4
 249:Src/motion.c  ****     Straight_Check();
 1212              		.loc 1 249 0
 1213 0002 FFF7FEFF 		bl	Straight_Check
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s 			page 26


 1214              	.LVL76:
 1215              	.L114:
 250:Src/motion.c  ****     while(flag.motion_end==false){}
 1216              		.loc 1 250 0 discriminator 1
 1217 0006 024B     		ldr	r3, .L116
 1218 0008 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 1219 000a 002B     		cmp	r3, #0
 1220 000c FBD0     		beq	.L114
 251:Src/motion.c  **** }
 1221              		.loc 1 251 0
 1222 000e 08BD     		pop	{r3, pc}
 1223              	.L117:
 1224              		.align	2
 1225              	.L116:
 1226 0010 00000000 		.word	flag
 1227              		.cfi_endproc
 1228              	.LFE144:
 1230              		.section	.text.Motion_Back,"ax",%progbits
 1231              		.align	1
 1232              		.global	Motion_Back
 1233              		.syntax unified
 1234              		.thumb
 1235              		.thumb_func
 1236              		.fpu fpv4-sp-d16
 1238              	Motion_Back:
 1239              	.LFB145:
 252:Src/motion.c  **** 
 253:Src/motion.c  **** void Motion_Back(void){
 1240              		.loc 1 253 0
 1241              		.cfi_startproc
 1242              		@ args = 0, pretend = 0, frame = 0
 1243              		@ frame_needed = 0, uses_anonymous_args = 0
 1244 0000 08B5     		push	{r3, lr}
 1245              	.LCFI19:
 1246              		.cfi_def_cfa_offset 8
 1247              		.cfi_offset 3, -8
 1248              		.cfi_offset 14, -4
 254:Src/motion.c  ****     Back();
 1249              		.loc 1 254 0
 1250 0002 FFF7FEFF 		bl	Back
 1251              	.LVL77:
 1252              	.L119:
 255:Src/motion.c  ****     while(flag.accel==ON || flag.straight==ON){}
 1253              		.loc 1 255 0 discriminator 3
 1254 0006 074B     		ldr	r3, .L122
 1255 0008 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1256 000a DBB2     		uxtb	r3, r3
 1257 000c 012B     		cmp	r3, #1
 1258 000e FAD0     		beq	.L119
 1259              		.loc 1 255 0 is_stmt 0 discriminator 2
 1260 0010 044B     		ldr	r3, .L122
 1261 0012 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1262 0014 DBB2     		uxtb	r3, r3
 1263 0016 012B     		cmp	r3, #1
 1264 0018 F5D0     		beq	.L119
 256:Src/motion.c  ****     Output_Buzzer(HZ_C_H);
 1265              		.loc 1 256 0 is_stmt 1
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s 			page 27


 1266 001a 4C20     		movs	r0, #76
 1267 001c FFF7FEFF 		bl	Output_Buzzer
 1268              	.LVL78:
 257:Src/motion.c  **** }
 1269              		.loc 1 257 0
 1270 0020 08BD     		pop	{r3, pc}
 1271              	.L123:
 1272 0022 00BF     		.align	2
 1273              	.L122:
 1274 0024 00000000 		.word	flag
 1275              		.cfi_endproc
 1276              	.LFE145:
 1278              		.global	__aeabi_f2d
 1279              		.section	.text.Show_log,"ax",%progbits
 1280              		.align	1
 1281              		.global	Show_log
 1282              		.syntax unified
 1283              		.thumb
 1284              		.thumb_func
 1285              		.fpu fpv4-sp-d16
 1287              	Show_log:
 1288              	.LFB146:
 258:Src/motion.c  **** /****************************************************************************************
 259:Src/motion.c  ****  * outline  : show log
 260:Src/motion.c  ****  * argument : void
 261:Src/motion.c  ****  * return   : void
 262:Src/motion.c  **** ********************************************************************************************/
 263:Src/motion.c  **** void Show_log(void){
 1289              		.loc 1 263 0
 1290              		.cfi_startproc
 1291              		@ args = 0, pretend = 0, frame = 0
 1292              		@ frame_needed = 0, uses_anonymous_args = 0
 1293 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1294              	.LCFI20:
 1295              		.cfi_def_cfa_offset 24
 1296              		.cfi_offset 4, -24
 1297              		.cfi_offset 5, -20
 1298              		.cfi_offset 6, -16
 1299              		.cfi_offset 7, -12
 1300              		.cfi_offset 8, -8
 1301              		.cfi_offset 14, -4
 1302 0004 84B0     		sub	sp, sp, #16
 1303              	.LCFI21:
 1304              		.cfi_def_cfa_offset 40
 264:Src/motion.c  ****     printf("\na:%d,c:%d,d:%d\r\n",y_accel_T,y_constant_T,y_decrease_T);
 1305              		.loc 1 264 0
 1306 0006 1F4B     		ldr	r3, .L131
 1307 0008 1B88     		ldrh	r3, [r3]
 1308 000a 1F4A     		ldr	r2, .L131+4
 1309 000c 1288     		ldrh	r2, [r2]
 1310 000e 1F49     		ldr	r1, .L131+8
 1311 0010 0988     		ldrh	r1, [r1]
 1312 0012 1F48     		ldr	r0, .L131+12
 1313 0014 FFF7FEFF 		bl	printf
 1314              	.LVL79:
 1315              	.LBB2:
 265:Src/motion.c  ****     for(uint16_t i=0;i<2000;i++){
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s 			page 28


 1316              		.loc 1 265 0
 1317 0018 0024     		movs	r4, #0
 1318              	.LVL80:
 1319              	.L125:
 1320              		.loc 1 265 0 is_stmt 0 discriminator 1
 1321 001a B4F5FA6F 		cmp	r4, #2000
 1322 001e 2ED2     		bcs	.L124
 266:Src/motion.c  ****         printf("%f\t%f\t%f\r\n",loger.target_y_velocity[i],loger.y_velocity[i],loger.velocity_c[i])
 1323              		.loc 1 266 0 is_stmt 1
 1324 0020 1C4B     		ldr	r3, .L131+16
 1325 0022 04F5FA61 		add	r1, r4, #2000
 1326 0026 03EB8101 		add	r1, r3, r1, lsl #2
 1327 002a 04F5BB52 		add	r2, r4, #5984
 1328 002e 1032     		adds	r2, r2, #16
 1329 0030 03EB8202 		add	r2, r3, r2, lsl #2
 1330 0034 1568     		ldr	r5, [r2]	@ float
 1331 0036 04F57A62 		add	r2, r4, #4000
 1332 003a 03EB8203 		add	r3, r3, r2, lsl #2
 1333 003e D3F80080 		ldr	r8, [r3]	@ float
 1334 0042 0868     		ldr	r0, [r1]	@ float
 1335 0044 FFF7FEFF 		bl	__aeabi_f2d
 1336              	.LVL81:
 1337 0048 0646     		mov	r6, r0
 1338 004a 0F46     		mov	r7, r1
 1339 004c 4046     		mov	r0, r8	@ float
 1340 004e FFF7FEFF 		bl	__aeabi_f2d
 1341              	.LVL82:
 1342 0052 CDE90201 		strd	r0, [sp, #8]
 1343 0056 2846     		mov	r0, r5	@ float
 1344 0058 FFF7FEFF 		bl	__aeabi_f2d
 1345              	.LVL83:
 1346 005c CDE90001 		strd	r0, [sp]
 1347 0060 3246     		mov	r2, r6
 1348 0062 3B46     		mov	r3, r7
 1349 0064 0C48     		ldr	r0, .L131+20
 1350 0066 FFF7FEFF 		bl	printf
 1351              	.LVL84:
 267:Src/motion.c  ****         if(Push()==ON){
 1352              		.loc 1 267 0
 1353 006a FFF7FEFF 		bl	Push
 1354              	.LVL85:
 1355 006e 0128     		cmp	r0, #1
 1356 0070 02D0     		beq	.L130
 265:Src/motion.c  ****     for(uint16_t i=0;i<2000;i++){
 1357              		.loc 1 265 0 discriminator 2
 1358 0072 0134     		adds	r4, r4, #1
 1359              	.LVL86:
 1360 0074 A4B2     		uxth	r4, r4
 1361              	.LVL87:
 1362 0076 D0E7     		b	.L125
 1363              	.L130:
 268:Src/motion.c  ****             Output_Buzzer(HZ_A);
 1364              		.loc 1 268 0
 1365 0078 5B20     		movs	r0, #91
 1366 007a FFF7FEFF 		bl	Output_Buzzer
 1367              	.LVL88:
 1368              	.L124:
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s 			page 29


 1369              	.LBE2:
 269:Src/motion.c  ****             break;
 270:Src/motion.c  ****         }
 271:Src/motion.c  ****     }
 272:Src/motion.c  **** }
 1370              		.loc 1 272 0
 1371 007e 04B0     		add	sp, sp, #16
 1372              	.LCFI22:
 1373              		.cfi_def_cfa_offset 24
 1374              		@ sp needed
 1375 0080 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1376              	.LVL89:
 1377              	.L132:
 1378              		.align	2
 1379              	.L131:
 1380 0084 00000000 		.word	y_decrease_T
 1381 0088 00000000 		.word	y_constant_T
 1382 008c 00000000 		.word	y_accel_T
 1383 0090 00000000 		.word	.LC0
 1384 0094 00000000 		.word	loger
 1385 0098 14000000 		.word	.LC1
 1386              		.cfi_endproc
 1387              	.LFE146:
 1389              		.section	.text.Sensor_Mode,"ax",%progbits
 1390              		.align	1
 1391              		.global	Sensor_Mode
 1392              		.syntax unified
 1393              		.thumb
 1394              		.thumb_func
 1395              		.fpu fpv4-sp-d16
 1397              	Sensor_Mode:
 1398              	.LFB147:
 273:Src/motion.c  **** 
 274:Src/motion.c  **** void Sensor_Mode(void){
 1399              		.loc 1 274 0
 1400              		.cfi_startproc
 1401              		@ args = 0, pretend = 0, frame = 0
 1402              		@ frame_needed = 0, uses_anonymous_args = 0
 1403 0000 10B5     		push	{r4, lr}
 1404              	.LCFI23:
 1405              		.cfi_def_cfa_offset 8
 1406              		.cfi_offset 4, -8
 1407              		.cfi_offset 14, -4
 275:Src/motion.c  ****     flag.ir_led = ON;
 1408              		.loc 1 275 0
 1409 0002 104B     		ldr	r3, .L139
 1410 0004 0122     		movs	r2, #1
 1411 0006 5A71     		strb	r2, [r3, #5]
 1412 0008 11E0     		b	.L136
 1413              	.LVL90:
 1414              	.L135:
 1415              	.LBB3:
 276:Src/motion.c  ****     while(1){
 277:Src/motion.c  ****         Sensor_Check();
 278:Src/motion.c  ****         for(int i=0;i<4;i++){
 279:Src/motion.c  ****             printf("%d\t",sensor.adc[i]);
 1416              		.loc 1 279 0 discriminator 3
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s 			page 30


 1417 000a 04F10802 		add	r2, r4, #8
 1418 000e 0E4B     		ldr	r3, .L139+4
 1419 0010 33F81210 		ldrh	r1, [r3, r2, lsl #1]
 1420 0014 0D48     		ldr	r0, .L139+8
 1421 0016 FFF7FEFF 		bl	printf
 1422              	.LVL91:
 278:Src/motion.c  ****             printf("%d\t",sensor.adc[i]);
 1423              		.loc 1 278 0 discriminator 3
 1424 001a 0134     		adds	r4, r4, #1
 1425              	.LVL92:
 1426              	.L134:
 278:Src/motion.c  ****             printf("%d\t",sensor.adc[i]);
 1427              		.loc 1 278 0 is_stmt 0 discriminator 1
 1428 001c 032C     		cmp	r4, #3
 1429 001e F4DD     		ble	.L135
 1430              	.LBE3:
 280:Src/motion.c  ****         }
 281:Src/motion.c  ****         printf("\r");
 1431              		.loc 1 281 0 is_stmt 1
 1432 0020 0D20     		movs	r0, #13
 1433 0022 FFF7FEFF 		bl	putchar
 1434              	.LVL93:
 282:Src/motion.c  ****         if(Push()==ON){
 1435              		.loc 1 282 0
 1436 0026 FFF7FEFF 		bl	Push
 1437              	.LVL94:
 1438 002a 0128     		cmp	r0, #1
 1439 002c 03D0     		beq	.L138
 1440              	.LVL95:
 1441              	.L136:
 277:Src/motion.c  ****         for(int i=0;i<4;i++){
 1442              		.loc 1 277 0
 1443 002e FFF7FEFF 		bl	Sensor_Check
 1444              	.LVL96:
 1445              	.LBB4:
 278:Src/motion.c  ****             printf("%d\t",sensor.adc[i]);
 1446              		.loc 1 278 0
 1447 0032 0024     		movs	r4, #0
 1448 0034 F2E7     		b	.L134
 1449              	.LVL97:
 1450              	.L138:
 1451              	.LBE4:
 283:Src/motion.c  ****             Output_Buzzer(HZ_A);
 1452              		.loc 1 283 0
 1453 0036 5B20     		movs	r0, #91
 1454 0038 FFF7FEFF 		bl	Output_Buzzer
 1455              	.LVL98:
 284:Src/motion.c  ****             flag.ir_led = OFF;
 1456              		.loc 1 284 0
 1457 003c 014B     		ldr	r3, .L139
 1458 003e 0022     		movs	r2, #0
 1459 0040 5A71     		strb	r2, [r3, #5]
 285:Src/motion.c  ****             break;
 286:Src/motion.c  ****         }
 287:Src/motion.c  ****     }
 288:Src/motion.c  **** }
 1460              		.loc 1 288 0
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s 			page 31


 1461 0042 10BD     		pop	{r4, pc}
 1462              	.LVL99:
 1463              	.L140:
 1464              		.align	2
 1465              	.L139:
 1466 0044 00000000 		.word	flag
 1467 0048 00000000 		.word	sensor
 1468 004c 00000000 		.word	.LC2
 1469              		.cfi_endproc
 1470              	.LFE147:
 1472              		.section	.text.Test_Create_Map,"ax",%progbits
 1473              		.align	1
 1474              		.global	Test_Create_Map
 1475              		.syntax unified
 1476              		.thumb
 1477              		.thumb_func
 1478              		.fpu fpv4-sp-d16
 1480              	Test_Create_Map:
 1481              	.LFB148:
 289:Src/motion.c  **** 
 290:Src/motion.c  **** void Test_Create_Map(void){
 1482              		.loc 1 290 0
 1483              		.cfi_startproc
 1484              		@ args = 0, pretend = 0, frame = 0
 1485              		@ frame_needed = 0, uses_anonymous_args = 0
 1486 0000 08B5     		push	{r3, lr}
 1487              	.LCFI24:
 1488              		.cfi_def_cfa_offset 8
 1489              		.cfi_offset 3, -8
 1490              		.cfi_offset 14, -4
 291:Src/motion.c  ****     flag.ir_led = OFF;
 1491              		.loc 1 291 0
 1492 0002 064B     		ldr	r3, .L143
 1493 0004 0022     		movs	r2, #0
 1494 0006 5A71     		strb	r2, [r3, #5]
 292:Src/motion.c  **** 
 293:Src/motion.c  ****     Maze_Set();
 1495              		.loc 1 293 0
 1496 0008 FFF7FEFF 		bl	Maze_Set
 1497              	.LVL100:
 294:Src/motion.c  ****     Init_maze();
 1498              		.loc 1 294 0
 1499 000c FFF7FEFF 		bl	Init_maze
 1500              	.LVL101:
 295:Src/motion.c  ****     MAZE_Create_Step();
 1501              		.loc 1 295 0
 1502 0010 FFF7FEFF 		bl	MAZE_Create_Step
 1503              	.LVL102:
 296:Src/motion.c  ****     MAZE_Printf_Step();
 1504              		.loc 1 296 0
 1505 0014 FFF7FEFF 		bl	MAZE_Printf_Step
 1506              	.LVL103:
 297:Src/motion.c  **** }
 1507              		.loc 1 297 0
 1508 0018 08BD     		pop	{r3, pc}
 1509              	.L144:
 1510 001a 00BF     		.align	2
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s 			page 32


 1511              	.L143:
 1512 001c 00000000 		.word	flag
 1513              		.cfi_endproc
 1514              	.LFE148:
 1516              		.section	.text.Batt_Check,"ax",%progbits
 1517              		.align	1
 1518              		.global	Batt_Check
 1519              		.syntax unified
 1520              		.thumb
 1521              		.thumb_func
 1522              		.fpu fpv4-sp-d16
 1524              	Batt_Check:
 1525              	.LFB149:
 298:Src/motion.c  **** 
 299:Src/motion.c  **** /****************************************************************************************
 300:Src/motion.c  ****  * outline  : normalize battery (12bit -> dec)
 301:Src/motion.c  ****  * argument : void
 302:Src/motion.c  ****  * return   : void
 303:Src/motion.c  **** ********************************************************************************************/
 304:Src/motion.c  **** void Batt_Check(void)
 305:Src/motion.c  **** {
 1526              		.loc 1 305 0
 1527              		.cfi_startproc
 1528              		@ args = 0, pretend = 0, frame = 0
 1529              		@ frame_needed = 0, uses_anonymous_args = 0
 1530 0000 08B5     		push	{r3, lr}
 1531              	.LCFI25:
 1532              		.cfi_def_cfa_offset 8
 1533              		.cfi_offset 3, -8
 1534              		.cfi_offset 14, -4
 1535              	.LVL104:
 1536              	.LBB5:
 306:Src/motion.c  ****   float batt=0;
 307:Src/motion.c  ****   for(int i=0;i<10;i++){
 1537              		.loc 1 307 0
 1538 0002 0023     		movs	r3, #0
 1539              	.LBE5:
 306:Src/motion.c  ****   float batt=0;
 1540              		.loc 1 306 0
 1541 0004 9FED177A 		vldr.32	s14, .L149
 1542              	.LBB6:
 1543              		.loc 1 307 0
 1544 0008 08E0     		b	.L146
 1545              	.LVL105:
 1546              	.L147:
 308:Src/motion.c  ****     batt += batt_analog;
 1547              		.loc 1 308 0 discriminator 3
 1548 000a 174A     		ldr	r2, .L149+4
 1549 000c 1288     		ldrh	r2, [r2]
 1550 000e 07EE902A 		vmov	s15, r2	@ int
 1551 0012 F8EEE77A 		vcvt.f32.s32	s15, s15
 1552 0016 37EE277A 		vadd.f32	s14, s14, s15
 1553              	.LVL106:
 307:Src/motion.c  ****     batt += batt_analog;
 1554              		.loc 1 307 0 discriminator 3
 1555 001a 0133     		adds	r3, r3, #1
 1556              	.LVL107:
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s 			page 33


 1557              	.L146:
 307:Src/motion.c  ****     batt += batt_analog;
 1558              		.loc 1 307 0 is_stmt 0 discriminator 1
 1559 001c 092B     		cmp	r3, #9
 1560 001e F4DD     		ble	.L147
 1561              	.LBE6:
 309:Src/motion.c  ****   }
 310:Src/motion.c  ****   batt /= 10.0f;
 1562              		.loc 1 310 0 is_stmt 1
 1563 0020 F2EE047A 		vmov.f32	s15, #1.0e+1
 1564 0024 C7EE276A 		vdiv.f32	s13, s14, s15
 1565              	.LVL108:
 311:Src/motion.c  ****   batt = batt/4095.0f*133.0f/33.0f*3.3f;
 1566              		.loc 1 311 0
 1567 0028 DFED107A 		vldr.32	s15, .L149+8
 1568 002c 86EEA77A 		vdiv.f32	s14, s13, s15
 1569 0030 DFED0F7A 		vldr.32	s15, .L149+12
 1570 0034 27EE277A 		vmul.f32	s14, s14, s15
 1571 0038 DFED0E6A 		vldr.32	s13, .L149+16
 1572              	.LVL109:
 1573 003c C7EE267A 		vdiv.f32	s15, s14, s13
 1574 0040 9FED0D7A 		vldr.32	s14, .L149+20
 1575 0044 67EE877A 		vmul.f32	s15, s15, s14
 1576              	.LVL110:
 312:Src/motion.c  ****   batt_Vcc = batt;
 1577              		.loc 1 312 0
 1578 0048 0C4B     		ldr	r3, .L149+24
 1579              	.LVL111:
 1580 004a C3ED007A 		vstr.32	s15, [r3]
 313:Src/motion.c  ****   printf("\nbatt:%lf\r\n",batt);
 1581              		.loc 1 313 0
 1582 004e 17EE900A 		vmov	r0, s15
 1583 0052 FFF7FEFF 		bl	__aeabi_f2d
 1584              	.LVL112:
 1585 0056 0246     		mov	r2, r0
 1586 0058 0B46     		mov	r3, r1
 1587 005a 0948     		ldr	r0, .L149+28
 1588 005c FFF7FEFF 		bl	printf
 1589              	.LVL113:
 314:Src/motion.c  **** }
 1590              		.loc 1 314 0
 1591 0060 08BD     		pop	{r3, pc}
 1592              	.L150:
 1593 0062 00BF     		.align	2
 1594              	.L149:
 1595 0064 00000000 		.word	0
 1596 0068 00000000 		.word	batt_analog
 1597 006c 00F07F45 		.word	1166012416
 1598 0070 00000543 		.word	1124401152
 1599 0074 00000442 		.word	1107558400
 1600 0078 33335340 		.word	1079194419
 1601 007c 00000000 		.word	batt_Vcc
 1602 0080 00000000 		.word	.LC3
 1603              		.cfi_endproc
 1604              	.LFE149:
 1606              		.comm	straight_dir,1,1
 1607              		.comm	wall_pid,2,2
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s 			page 34


 1608              		.comm	yawrate_pid,2,2
 1609              		.comm	straight_pid_r,2,2
 1610              		.comm	straight_pid_l,2,2
 1611              		.comm	w_befor,4,4
 1612              		.comm	w_sum,4,4
 1613              		.comm	y_sumsum,4,4
 1614              		.comm	y_sum,4,4
 1615              		.comm	s_sum_r,4,4
 1616              		.comm	s_sum_l,4,4
 1617              		.section	.rodata.Batt_Check.str1.4,"aMS",%progbits,1
 1618              		.align	2
 1619              	.LC3:
 1620 0000 0A626174 		.ascii	"\012batt:%lf\015\012\000"
 1620      743A256C 
 1620      660D0A00 
 1621              		.section	.rodata.Sensor_Mode.str1.4,"aMS",%progbits,1
 1622              		.align	2
 1623              	.LC2:
 1624 0000 25640900 		.ascii	"%d\011\000"
 1625              		.section	.rodata.Show_log.str1.4,"aMS",%progbits,1
 1626              		.align	2
 1627              	.LC0:
 1628 0000 0A613A25 		.ascii	"\012a:%d,c:%d,d:%d\015\012\000"
 1628      642C633A 
 1628      25642C64 
 1628      3A25640D 
 1628      0A00
 1629 0012 0000     		.space	2
 1630              	.LC1:
 1631 0014 25660925 		.ascii	"%f\011%f\011%f\015\012\000"
 1631      66092566 
 1631      0D0A00
 1632              		.text
 1633              	.Letext0:
 1634              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 1635              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 1636              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 1637              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 1638              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f405xx.h"
 1639              		.file 7 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 1640              		.file 8 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 1641              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\lib\\gcc\\arm-none-eabi
 1642              		.file 10 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 1643              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1644              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1645              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h"
 1646              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1647              		.file 15 "Inc/tim.h"
 1648              		.file 16 "Inc/global.h"
 1649              		.file 17 "Inc/control.h"
 1650              		.file 18 "Inc/spi.h"
 1651              		.file 19 "Inc/maze.h"
 1652              		.file 20 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 1653              		.file 21 "Inc/gpio.h"
 1654              		.file 22 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1655              		.file 23 "<built-in>"
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s 			page 35


DEFINED SYMBOLS
                            *ABS*:00000000 motion.c
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:18     .text.Normal_Turn_Half:00000000 $t
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:25     .text.Normal_Turn_Half:00000000 Normal_Turn_Half
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:101    .text.Normal_Turn_Half:0000005c $d
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:107    .text.Normal_Ennkai:00000000 $t
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:114    .text.Normal_Ennkai:00000000 Normal_Ennkai
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:188    .text.Normal_Ennkai:0000005c $d
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:194    .text.Ennkai:00000000 $t
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:201    .text.Ennkai:00000000 Ennkai
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:282    .text.Ennkai:00000064 $d
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:288    .text.Normal_Straight:00000000 $t
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:295    .text.Normal_Straight:00000000 Normal_Straight
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:371    .text.Normal_Straight:00000060 $d
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:377    .text.Straight_Start:00000000 $t
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:384    .text.Straight_Start:00000000 Straight_Start
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:418    .text.Straight_Start:00000020 $d
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:423    .text.Straight:00000000 $t
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:430    .text.Straight:00000000 Straight
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:463    .text.Straight:0000001c $d
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:468    .text.Straight_HalF:00000000 $t
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:475    .text.Straight_HalF:00000000 Straight_HalF
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:506    .text.Straight_HalF:0000001c $d
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:511    .text.Turn_Half:00000000 $t
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:518    .text.Turn_Half:00000000 Turn_Half
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:553    .text.Turn_Half:0000001c $d
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:558    .text.Turn_Quarter_Left:00000000 $t
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:565    .text.Turn_Quarter_Left:00000000 Turn_Quarter_Left
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:600    .text.Turn_Quarter_Left:0000001c $d
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:605    .text.Turn_Quarter_Right:00000000 $t
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:612    .text.Turn_Quarter_Right:00000000 Turn_Quarter_Right
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:646    .text.Turn_Quarter_Right:00000020 $d
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:651    .text.Back:00000000 $t
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:658    .text.Back:00000000 Back
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:692    .text.Back:00000020 $d
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:697    .text.Straight_Check:00000000 $t
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:704    .text.Straight_Check:00000000 Straight_Check
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:745    .text.Straight_Check:0000002c $d
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:750    .text.Motion_Start:00000000 $t
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:757    .text.Motion_Start:00000000 Motion_Start
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:813    .text.Motion_Start:00000044 $d
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:818    .text.Motion_Straight:00000000 $t
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:825    .text.Motion_Straight:00000000 Motion_Straight
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:861    .text.Motion_Straight:00000024 $d
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:866    .text.Motion_Left:00000000 $t
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:873    .text.Motion_Left:00000000 Motion_Left
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:949    .text.Motion_Left:00000064 $d
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:954    .text.Motion_Right:00000000 $t
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:961    .text.Motion_Right:00000000 Motion_Right
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:1037   .text.Motion_Right:00000064 $d
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:1042   .text.Motion_Uturn:00000000 $t
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:1049   .text.Motion_Uturn:00000000 Motion_Uturn
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:1141   .text.Motion_Uturn:0000007c $d
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:1146   .text.Motion_Goal:00000000 $t
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:1153   .text.Motion_Goal:00000000 Motion_Goal
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:1189   .text.Motion_Goal:00000024 $d
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:1194   .text.Motion_Straight_Check:00000000 $t
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s 			page 36


C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:1201   .text.Motion_Straight_Check:00000000 Motion_Straight_Check
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:1226   .text.Motion_Straight_Check:00000010 $d
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:1231   .text.Motion_Back:00000000 $t
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:1238   .text.Motion_Back:00000000 Motion_Back
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:1274   .text.Motion_Back:00000024 $d
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:1280   .text.Show_log:00000000 $t
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:1287   .text.Show_log:00000000 Show_log
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:1380   .text.Show_log:00000084 $d
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:1390   .text.Sensor_Mode:00000000 $t
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:1397   .text.Sensor_Mode:00000000 Sensor_Mode
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:1466   .text.Sensor_Mode:00000044 $d
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:1473   .text.Test_Create_Map:00000000 $t
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:1480   .text.Test_Create_Map:00000000 Test_Create_Map
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:1512   .text.Test_Create_Map:0000001c $d
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:1517   .text.Batt_Check:00000000 $t
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:1524   .text.Batt_Check:00000000 Batt_Check
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:1595   .text.Batt_Check:00000064 $d
                            *COM*:00000001 straight_dir
                            *COM*:00000002 wall_pid
                            *COM*:00000002 yawrate_pid
                            *COM*:00000002 straight_pid_r
                            *COM*:00000002 straight_pid_l
                            *COM*:00000004 w_befor
                            *COM*:00000004 w_sum
                            *COM*:00000004 y_sumsum
                            *COM*:00000004 y_sum
                            *COM*:00000004 s_sum_r
                            *COM*:00000004 s_sum_l
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:1618   .rodata.Batt_Check.str1.4:00000000 $d
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:1622   .rodata.Sensor_Mode.str1.4:00000000 $d
C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s:1626   .rodata.Show_log.str1.4:00000000 $d

UNDEFINED SYMBOLS
Output_Buzzer
gyro_offset_calc_reset
Yawrate_Calc_fb
HAL_Delay
Push
flag
sensor
Yawrate_Calc_Zero
Straight_Calc_Zero
Straight_Calc_fb
__aeabi_f2d
printf
y_decrease_T
y_constant_T
y_accel_T
loger
putchar
Sensor_Check
Maze_Set
Init_maze
MAZE_Create_Step
MAZE_Printf_Step
batt_analog
batt_Vcc
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\ccDRBR9l.s 			page 37


