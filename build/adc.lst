ARM GAS  C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"adc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_ADC1_Init,"ax",%progbits
  18              		.align	1
  19              		.global	MX_ADC1_Init
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	MX_ADC1_Init:
  26              	.LFB126:
  27              		.file 1 "Src/adc.c"
   1:Src/adc.c     **** /**
   2:Src/adc.c     ****   ******************************************************************************
   3:Src/adc.c     ****   * File Name          : ADC.c
   4:Src/adc.c     ****   * Description        : This file provides code for the configuration
   5:Src/adc.c     ****   *                      of the ADC instances.
   6:Src/adc.c     ****   ******************************************************************************
   7:Src/adc.c     ****   ** This notice applies to any and all portions of this file
   8:Src/adc.c     ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/adc.c     ****   * USER CODE END. Other portions of this file, whether 
  10:Src/adc.c     ****   * inserted by the user or by software development tools
  11:Src/adc.c     ****   * are owned by their respective copyright owners.
  12:Src/adc.c     ****   *
  13:Src/adc.c     ****   * COPYRIGHT(c) 2018 STMicroelectronics
  14:Src/adc.c     ****   *
  15:Src/adc.c     ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/adc.c     ****   * are permitted provided that the following conditions are met:
  17:Src/adc.c     ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/adc.c     ****   *      this list of conditions and the following disclaimer.
  19:Src/adc.c     ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/adc.c     ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/adc.c     ****   *      and/or other materials provided with the distribution.
  22:Src/adc.c     ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/adc.c     ****   *      may be used to endorse or promote products derived from this software
  24:Src/adc.c     ****   *      without specific prior written permission.
  25:Src/adc.c     ****   *
  26:Src/adc.c     ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/adc.c     ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/adc.c     ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/adc.c     ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/adc.c     ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:Src/adc.c     ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s 			page 2


  32:Src/adc.c     ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/adc.c     ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/adc.c     ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/adc.c     ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/adc.c     ****   *
  37:Src/adc.c     ****   ******************************************************************************
  38:Src/adc.c     ****   */
  39:Src/adc.c     **** 
  40:Src/adc.c     **** /* Includes ------------------------------------------------------------------*/
  41:Src/adc.c     **** #include "adc.h"
  42:Src/adc.c     **** 
  43:Src/adc.c     **** #include "gpio.h"
  44:Src/adc.c     **** 
  45:Src/adc.c     **** /* USER CODE BEGIN 0 */
  46:Src/adc.c     **** #include "global.h"
  47:Src/adc.c     **** /* USER CODE END 0 */
  48:Src/adc.c     **** 
  49:Src/adc.c     **** ADC_HandleTypeDef hadc1;
  50:Src/adc.c     **** ADC_HandleTypeDef hadc2;
  51:Src/adc.c     **** ADC_HandleTypeDef hadc3;
  52:Src/adc.c     **** 
  53:Src/adc.c     **** /* ADC1 init function */
  54:Src/adc.c     **** void MX_ADC1_Init(void)
  55:Src/adc.c     **** {
  28              		.loc 1 55 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 16
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 00B5     		push	{lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 4
  35              		.cfi_offset 14, -4
  36 0002 85B0     		sub	sp, sp, #20
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 24
  56:Src/adc.c     ****   ADC_ChannelConfTypeDef sConfig;
  57:Src/adc.c     **** 
  58:Src/adc.c     ****     /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of co
  59:Src/adc.c     ****     */
  60:Src/adc.c     ****   hadc1.Instance = ADC1;
  39              		.loc 1 60 0
  40 0004 1648     		ldr	r0, .L7
  41 0006 174B     		ldr	r3, .L7+4
  42 0008 0360     		str	r3, [r0]
  61:Src/adc.c     ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  43              		.loc 1 61 0
  44 000a 4FF48033 		mov	r3, #65536
  45 000e 4360     		str	r3, [r0, #4]
  62:Src/adc.c     ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  46              		.loc 1 62 0
  47 0010 0023     		movs	r3, #0
  48 0012 8360     		str	r3, [r0, #8]
  63:Src/adc.c     ****   hadc1.Init.ScanConvMode = DISABLE;
  49              		.loc 1 63 0
  50 0014 0361     		str	r3, [r0, #16]
  64:Src/adc.c     ****   hadc1.Init.ContinuousConvMode = DISABLE;
  51              		.loc 1 64 0
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s 			page 3


  52 0016 8361     		str	r3, [r0, #24]
  65:Src/adc.c     ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
  53              		.loc 1 65 0
  54 0018 0362     		str	r3, [r0, #32]
  66:Src/adc.c     ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  55              		.loc 1 66 0
  56 001a C362     		str	r3, [r0, #44]
  67:Src/adc.c     ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  57              		.loc 1 67 0
  58 001c 124A     		ldr	r2, .L7+8
  59 001e 8262     		str	r2, [r0, #40]
  68:Src/adc.c     ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  60              		.loc 1 68 0
  61 0020 C360     		str	r3, [r0, #12]
  69:Src/adc.c     ****   hadc1.Init.NbrOfConversion = 1;
  62              		.loc 1 69 0
  63 0022 0122     		movs	r2, #1
  64 0024 C261     		str	r2, [r0, #28]
  70:Src/adc.c     ****   hadc1.Init.DMAContinuousRequests = DISABLE;
  65              		.loc 1 70 0
  66 0026 0363     		str	r3, [r0, #48]
  71:Src/adc.c     ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  67              		.loc 1 71 0
  68 0028 4261     		str	r2, [r0, #20]
  72:Src/adc.c     ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
  69              		.loc 1 72 0
  70 002a FFF7FEFF 		bl	HAL_ADC_Init
  71              	.LVL0:
  72 002e 68B9     		cbnz	r0, .L5
  73              	.L2:
  73:Src/adc.c     ****   {
  74:Src/adc.c     ****     _Error_Handler(__FILE__, __LINE__);
  75:Src/adc.c     ****   }
  76:Src/adc.c     **** 
  77:Src/adc.c     ****     /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and i
  78:Src/adc.c     ****     */
  79:Src/adc.c     ****   sConfig.Channel = ADC_CHANNEL_4;
  74              		.loc 1 79 0
  75 0030 0423     		movs	r3, #4
  76 0032 0093     		str	r3, [sp]
  80:Src/adc.c     ****   sConfig.Rank = 1;
  77              		.loc 1 80 0
  78 0034 0123     		movs	r3, #1
  79 0036 0193     		str	r3, [sp, #4]
  81:Src/adc.c     ****   sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
  80              		.loc 1 81 0
  81 0038 0323     		movs	r3, #3
  82 003a 0293     		str	r3, [sp, #8]
  82:Src/adc.c     ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  83              		.loc 1 82 0
  84 003c 6946     		mov	r1, sp
  85 003e 0848     		ldr	r0, .L7
  86 0040 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
  87              	.LVL1:
  88 0044 38B9     		cbnz	r0, .L6
  89              	.L1:
  83:Src/adc.c     ****   {
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s 			page 4


  84:Src/adc.c     ****     _Error_Handler(__FILE__, __LINE__);
  85:Src/adc.c     ****   }
  86:Src/adc.c     **** 
  87:Src/adc.c     **** }
  90              		.loc 1 87 0
  91 0046 05B0     		add	sp, sp, #20
  92              	.LCFI2:
  93              		.cfi_remember_state
  94              		.cfi_def_cfa_offset 4
  95              		@ sp needed
  96 0048 5DF804FB 		ldr	pc, [sp], #4
  97              	.L5:
  98              	.LCFI3:
  99              		.cfi_restore_state
  74:Src/adc.c     ****   }
 100              		.loc 1 74 0
 101 004c 4A21     		movs	r1, #74
 102 004e 0748     		ldr	r0, .L7+12
 103 0050 FFF7FEFF 		bl	_Error_Handler
 104              	.LVL2:
 105 0054 ECE7     		b	.L2
 106              	.L6:
  84:Src/adc.c     ****   }
 107              		.loc 1 84 0
 108 0056 5421     		movs	r1, #84
 109 0058 0448     		ldr	r0, .L7+12
 110 005a FFF7FEFF 		bl	_Error_Handler
 111              	.LVL3:
 112              		.loc 1 87 0
 113 005e F2E7     		b	.L1
 114              	.L8:
 115              		.align	2
 116              	.L7:
 117 0060 00000000 		.word	hadc1
 118 0064 00200140 		.word	1073815552
 119 0068 0100000F 		.word	251658241
 120 006c 00000000 		.word	.LC0
 121              		.cfi_endproc
 122              	.LFE126:
 124              		.section	.text.MX_ADC2_Init,"ax",%progbits
 125              		.align	1
 126              		.global	MX_ADC2_Init
 127              		.syntax unified
 128              		.thumb
 129              		.thumb_func
 130              		.fpu fpv4-sp-d16
 132              	MX_ADC2_Init:
 133              	.LFB127:
  88:Src/adc.c     **** /* ADC2 init function */
  89:Src/adc.c     **** void MX_ADC2_Init(void)
  90:Src/adc.c     **** {
 134              		.loc 1 90 0
 135              		.cfi_startproc
 136              		@ args = 0, pretend = 0, frame = 16
 137              		@ frame_needed = 0, uses_anonymous_args = 0
 138 0000 00B5     		push	{lr}
 139              	.LCFI4:
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s 			page 5


 140              		.cfi_def_cfa_offset 4
 141              		.cfi_offset 14, -4
 142 0002 85B0     		sub	sp, sp, #20
 143              	.LCFI5:
 144              		.cfi_def_cfa_offset 24
  91:Src/adc.c     ****   ADC_ChannelConfTypeDef sConfig;
  92:Src/adc.c     **** 
  93:Src/adc.c     ****     /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of co
  94:Src/adc.c     ****     */
  95:Src/adc.c     ****   hadc2.Instance = ADC2;
 145              		.loc 1 95 0
 146 0004 1648     		ldr	r0, .L15
 147 0006 174B     		ldr	r3, .L15+4
 148 0008 0360     		str	r3, [r0]
  96:Src/adc.c     ****   hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 149              		.loc 1 96 0
 150 000a 4FF48033 		mov	r3, #65536
 151 000e 4360     		str	r3, [r0, #4]
  97:Src/adc.c     ****   hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 152              		.loc 1 97 0
 153 0010 0023     		movs	r3, #0
 154 0012 8360     		str	r3, [r0, #8]
  98:Src/adc.c     ****   hadc2.Init.ScanConvMode = DISABLE;
 155              		.loc 1 98 0
 156 0014 0361     		str	r3, [r0, #16]
  99:Src/adc.c     ****   hadc2.Init.ContinuousConvMode = DISABLE;
 157              		.loc 1 99 0
 158 0016 8361     		str	r3, [r0, #24]
 100:Src/adc.c     ****   hadc2.Init.DiscontinuousConvMode = DISABLE;
 159              		.loc 1 100 0
 160 0018 0362     		str	r3, [r0, #32]
 101:Src/adc.c     ****   hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 161              		.loc 1 101 0
 162 001a C362     		str	r3, [r0, #44]
 102:Src/adc.c     ****   hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 163              		.loc 1 102 0
 164 001c 124A     		ldr	r2, .L15+8
 165 001e 8262     		str	r2, [r0, #40]
 103:Src/adc.c     ****   hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 166              		.loc 1 103 0
 167 0020 C360     		str	r3, [r0, #12]
 104:Src/adc.c     ****   hadc2.Init.NbrOfConversion = 1;
 168              		.loc 1 104 0
 169 0022 0122     		movs	r2, #1
 170 0024 C261     		str	r2, [r0, #28]
 105:Src/adc.c     ****   hadc2.Init.DMAContinuousRequests = DISABLE;
 171              		.loc 1 105 0
 172 0026 0363     		str	r3, [r0, #48]
 106:Src/adc.c     ****   hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 173              		.loc 1 106 0
 174 0028 4261     		str	r2, [r0, #20]
 107:Src/adc.c     ****   if (HAL_ADC_Init(&hadc2) != HAL_OK)
 175              		.loc 1 107 0
 176 002a FFF7FEFF 		bl	HAL_ADC_Init
 177              	.LVL4:
 178 002e 60B9     		cbnz	r0, .L13
 179              	.L10:
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s 			page 6


 108:Src/adc.c     ****   {
 109:Src/adc.c     ****     _Error_Handler(__FILE__, __LINE__);
 110:Src/adc.c     ****   }
 111:Src/adc.c     **** 
 112:Src/adc.c     ****     /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and i
 113:Src/adc.c     ****     */
 114:Src/adc.c     ****   sConfig.Channel = ADC_CHANNEL_0;
 180              		.loc 1 114 0
 181 0030 0023     		movs	r3, #0
 182 0032 0093     		str	r3, [sp]
 115:Src/adc.c     ****   sConfig.Rank = 1;
 183              		.loc 1 115 0
 184 0034 0122     		movs	r2, #1
 185 0036 0192     		str	r2, [sp, #4]
 116:Src/adc.c     ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 186              		.loc 1 116 0
 187 0038 0293     		str	r3, [sp, #8]
 117:Src/adc.c     ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 188              		.loc 1 117 0
 189 003a 6946     		mov	r1, sp
 190 003c 0848     		ldr	r0, .L15
 191 003e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 192              	.LVL5:
 193 0042 38B9     		cbnz	r0, .L14
 194              	.L9:
 118:Src/adc.c     ****   {
 119:Src/adc.c     ****     _Error_Handler(__FILE__, __LINE__);
 120:Src/adc.c     ****   }
 121:Src/adc.c     **** 
 122:Src/adc.c     **** }
 195              		.loc 1 122 0
 196 0044 05B0     		add	sp, sp, #20
 197              	.LCFI6:
 198              		.cfi_remember_state
 199              		.cfi_def_cfa_offset 4
 200              		@ sp needed
 201 0046 5DF804FB 		ldr	pc, [sp], #4
 202              	.L13:
 203              	.LCFI7:
 204              		.cfi_restore_state
 109:Src/adc.c     ****   }
 205              		.loc 1 109 0
 206 004a 6D21     		movs	r1, #109
 207 004c 0748     		ldr	r0, .L15+12
 208 004e FFF7FEFF 		bl	_Error_Handler
 209              	.LVL6:
 210 0052 EDE7     		b	.L10
 211              	.L14:
 119:Src/adc.c     ****   }
 212              		.loc 1 119 0
 213 0054 7721     		movs	r1, #119
 214 0056 0548     		ldr	r0, .L15+12
 215 0058 FFF7FEFF 		bl	_Error_Handler
 216              	.LVL7:
 217              		.loc 1 122 0
 218 005c F2E7     		b	.L9
 219              	.L16:
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s 			page 7


 220 005e 00BF     		.align	2
 221              	.L15:
 222 0060 00000000 		.word	hadc2
 223 0064 00210140 		.word	1073815808
 224 0068 0100000F 		.word	251658241
 225 006c 00000000 		.word	.LC0
 226              		.cfi_endproc
 227              	.LFE127:
 229              		.section	.text.MX_ADC3_Init,"ax",%progbits
 230              		.align	1
 231              		.global	MX_ADC3_Init
 232              		.syntax unified
 233              		.thumb
 234              		.thumb_func
 235              		.fpu fpv4-sp-d16
 237              	MX_ADC3_Init:
 238              	.LFB128:
 123:Src/adc.c     **** /* ADC3 init function */
 124:Src/adc.c     **** void MX_ADC3_Init(void)
 125:Src/adc.c     **** {
 239              		.loc 1 125 0
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 16
 242              		@ frame_needed = 0, uses_anonymous_args = 0
 243 0000 00B5     		push	{lr}
 244              	.LCFI8:
 245              		.cfi_def_cfa_offset 4
 246              		.cfi_offset 14, -4
 247 0002 85B0     		sub	sp, sp, #20
 248              	.LCFI9:
 249              		.cfi_def_cfa_offset 24
 126:Src/adc.c     ****   ADC_ChannelConfTypeDef sConfig;
 127:Src/adc.c     **** 
 128:Src/adc.c     ****     /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of co
 129:Src/adc.c     ****     */
 130:Src/adc.c     ****   hadc3.Instance = ADC3;
 250              		.loc 1 130 0
 251 0004 1648     		ldr	r0, .L23
 252 0006 174B     		ldr	r3, .L23+4
 253 0008 0360     		str	r3, [r0]
 131:Src/adc.c     ****   hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 254              		.loc 1 131 0
 255 000a 4FF48033 		mov	r3, #65536
 256 000e 4360     		str	r3, [r0, #4]
 132:Src/adc.c     ****   hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 257              		.loc 1 132 0
 258 0010 0023     		movs	r3, #0
 259 0012 8360     		str	r3, [r0, #8]
 133:Src/adc.c     ****   hadc3.Init.ScanConvMode = DISABLE;
 260              		.loc 1 133 0
 261 0014 0361     		str	r3, [r0, #16]
 134:Src/adc.c     ****   hadc3.Init.ContinuousConvMode = DISABLE;
 262              		.loc 1 134 0
 263 0016 8361     		str	r3, [r0, #24]
 135:Src/adc.c     ****   hadc3.Init.DiscontinuousConvMode = DISABLE;
 264              		.loc 1 135 0
 265 0018 0362     		str	r3, [r0, #32]
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s 			page 8


 136:Src/adc.c     ****   hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 266              		.loc 1 136 0
 267 001a C362     		str	r3, [r0, #44]
 137:Src/adc.c     ****   hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 268              		.loc 1 137 0
 269 001c 124A     		ldr	r2, .L23+8
 270 001e 8262     		str	r2, [r0, #40]
 138:Src/adc.c     ****   hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 271              		.loc 1 138 0
 272 0020 C360     		str	r3, [r0, #12]
 139:Src/adc.c     ****   hadc3.Init.NbrOfConversion = 1;
 273              		.loc 1 139 0
 274 0022 0122     		movs	r2, #1
 275 0024 C261     		str	r2, [r0, #28]
 140:Src/adc.c     ****   hadc3.Init.DMAContinuousRequests = DISABLE;
 276              		.loc 1 140 0
 277 0026 0363     		str	r3, [r0, #48]
 141:Src/adc.c     ****   hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 278              		.loc 1 141 0
 279 0028 4261     		str	r2, [r0, #20]
 142:Src/adc.c     ****   if (HAL_ADC_Init(&hadc3) != HAL_OK)
 280              		.loc 1 142 0
 281 002a FFF7FEFF 		bl	HAL_ADC_Init
 282              	.LVL8:
 283 002e 60B9     		cbnz	r0, .L21
 284              	.L18:
 143:Src/adc.c     ****   {
 144:Src/adc.c     ****     _Error_Handler(__FILE__, __LINE__);
 145:Src/adc.c     ****   }
 146:Src/adc.c     **** 
 147:Src/adc.c     ****     /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and i
 148:Src/adc.c     ****     */
 149:Src/adc.c     ****   sConfig.Channel = ADC_CHANNEL_1;
 285              		.loc 1 149 0
 286 0030 0123     		movs	r3, #1
 287 0032 0093     		str	r3, [sp]
 150:Src/adc.c     ****   sConfig.Rank = 1;
 288              		.loc 1 150 0
 289 0034 0193     		str	r3, [sp, #4]
 151:Src/adc.c     ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 290              		.loc 1 151 0
 291 0036 0023     		movs	r3, #0
 292 0038 0293     		str	r3, [sp, #8]
 152:Src/adc.c     ****   if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 293              		.loc 1 152 0
 294 003a 6946     		mov	r1, sp
 295 003c 0848     		ldr	r0, .L23
 296 003e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 297              	.LVL9:
 298 0042 38B9     		cbnz	r0, .L22
 299              	.L17:
 153:Src/adc.c     ****   {
 154:Src/adc.c     ****     _Error_Handler(__FILE__, __LINE__);
 155:Src/adc.c     ****   }
 156:Src/adc.c     **** 
 157:Src/adc.c     **** }
 300              		.loc 1 157 0
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s 			page 9


 301 0044 05B0     		add	sp, sp, #20
 302              	.LCFI10:
 303              		.cfi_remember_state
 304              		.cfi_def_cfa_offset 4
 305              		@ sp needed
 306 0046 5DF804FB 		ldr	pc, [sp], #4
 307              	.L21:
 308              	.LCFI11:
 309              		.cfi_restore_state
 144:Src/adc.c     ****   }
 310              		.loc 1 144 0
 311 004a 9021     		movs	r1, #144
 312 004c 0748     		ldr	r0, .L23+12
 313 004e FFF7FEFF 		bl	_Error_Handler
 314              	.LVL10:
 315 0052 EDE7     		b	.L18
 316              	.L22:
 154:Src/adc.c     ****   }
 317              		.loc 1 154 0
 318 0054 9A21     		movs	r1, #154
 319 0056 0548     		ldr	r0, .L23+12
 320 0058 FFF7FEFF 		bl	_Error_Handler
 321              	.LVL11:
 322              		.loc 1 157 0
 323 005c F2E7     		b	.L17
 324              	.L24:
 325 005e 00BF     		.align	2
 326              	.L23:
 327 0060 00000000 		.word	hadc3
 328 0064 00220140 		.word	1073816064
 329 0068 0100000F 		.word	251658241
 330 006c 00000000 		.word	.LC0
 331              		.cfi_endproc
 332              	.LFE128:
 334              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
 335              		.align	1
 336              		.global	HAL_ADC_MspInit
 337              		.syntax unified
 338              		.thumb
 339              		.thumb_func
 340              		.fpu fpv4-sp-d16
 342              	HAL_ADC_MspInit:
 343              	.LFB129:
 158:Src/adc.c     **** 
 159:Src/adc.c     **** void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
 160:Src/adc.c     **** {
 344              		.loc 1 160 0
 345              		.cfi_startproc
 346              		@ args = 0, pretend = 0, frame = 32
 347              		@ frame_needed = 0, uses_anonymous_args = 0
 348              	.LVL12:
 349 0000 00B5     		push	{lr}
 350              	.LCFI12:
 351              		.cfi_def_cfa_offset 4
 352              		.cfi_offset 14, -4
 353 0002 89B0     		sub	sp, sp, #36
 354              	.LCFI13:
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s 			page 10


 355              		.cfi_def_cfa_offset 40
 161:Src/adc.c     **** 
 162:Src/adc.c     ****   GPIO_InitTypeDef GPIO_InitStruct;
 163:Src/adc.c     ****   if(adcHandle->Instance==ADC1)
 356              		.loc 1 163 0
 357 0004 0368     		ldr	r3, [r0]
 358 0006 274A     		ldr	r2, .L33
 359 0008 9342     		cmp	r3, r2
 360 000a 08D0     		beq	.L30
 164:Src/adc.c     ****   {
 165:Src/adc.c     ****   /* USER CODE BEGIN ADC1_MspInit 0 */
 166:Src/adc.c     **** 
 167:Src/adc.c     ****   /* USER CODE END ADC1_MspInit 0 */
 168:Src/adc.c     ****     /* ADC1 clock enable */
 169:Src/adc.c     ****     __HAL_RCC_ADC1_CLK_ENABLE();
 170:Src/adc.c     ****   
 171:Src/adc.c     ****     /**ADC1 GPIO Configuration    
 172:Src/adc.c     ****     PA4     ------> ADC1_IN4 
 173:Src/adc.c     ****     */
 174:Src/adc.c     ****     GPIO_InitStruct.Pin = GPIO_PIN_4;
 175:Src/adc.c     ****     GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 176:Src/adc.c     ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 177:Src/adc.c     ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 178:Src/adc.c     **** 
 179:Src/adc.c     ****   /* USER CODE BEGIN ADC1_MspInit 1 */
 180:Src/adc.c     **** 
 181:Src/adc.c     ****   /* USER CODE END ADC1_MspInit 1 */
 182:Src/adc.c     ****   }
 183:Src/adc.c     ****   else if(adcHandle->Instance==ADC2)
 361              		.loc 1 183 0
 362 000c 264A     		ldr	r2, .L33+4
 363 000e 9342     		cmp	r3, r2
 364 0010 1BD0     		beq	.L31
 184:Src/adc.c     ****   {
 185:Src/adc.c     ****   /* USER CODE BEGIN ADC2_MspInit 0 */
 186:Src/adc.c     **** 
 187:Src/adc.c     ****   /* USER CODE END ADC2_MspInit 0 */
 188:Src/adc.c     ****     /* ADC2 clock enable */
 189:Src/adc.c     ****     __HAL_RCC_ADC2_CLK_ENABLE();
 190:Src/adc.c     ****   
 191:Src/adc.c     ****     /**ADC2 GPIO Configuration    
 192:Src/adc.c     ****     PA0-WKUP     ------> ADC2_IN0
 193:Src/adc.c     ****     PA3     ------> ADC2_IN3 
 194:Src/adc.c     ****     */
 195:Src/adc.c     ****     GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 196:Src/adc.c     ****     GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 197:Src/adc.c     ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 198:Src/adc.c     ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 199:Src/adc.c     **** 
 200:Src/adc.c     ****   /* USER CODE BEGIN ADC2_MspInit 1 */
 201:Src/adc.c     **** 
 202:Src/adc.c     ****   /* USER CODE END ADC2_MspInit 1 */
 203:Src/adc.c     ****   }
 204:Src/adc.c     ****   else if(adcHandle->Instance==ADC3)
 365              		.loc 1 204 0
 366 0012 264A     		ldr	r2, .L33+8
 367 0014 9342     		cmp	r3, r2
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s 			page 11


 368 0016 2ED0     		beq	.L32
 369              	.LVL13:
 370              	.L25:
 205:Src/adc.c     ****   {
 206:Src/adc.c     ****   /* USER CODE BEGIN ADC3_MspInit 0 */
 207:Src/adc.c     **** 
 208:Src/adc.c     ****   /* USER CODE END ADC3_MspInit 0 */
 209:Src/adc.c     ****     /* ADC3 clock enable */
 210:Src/adc.c     ****     __HAL_RCC_ADC3_CLK_ENABLE();
 211:Src/adc.c     ****   
 212:Src/adc.c     ****     /**ADC3 GPIO Configuration    
 213:Src/adc.c     ****     PA1     ------> ADC3_IN1
 214:Src/adc.c     ****     PA2     ------> ADC3_IN2 
 215:Src/adc.c     ****     */
 216:Src/adc.c     ****     GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 217:Src/adc.c     ****     GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 218:Src/adc.c     ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 219:Src/adc.c     ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 220:Src/adc.c     **** 
 221:Src/adc.c     ****   /* USER CODE BEGIN ADC3_MspInit 1 */
 222:Src/adc.c     **** 
 223:Src/adc.c     ****   /* USER CODE END ADC3_MspInit 1 */
 224:Src/adc.c     ****   }
 225:Src/adc.c     **** }
 371              		.loc 1 225 0
 372 0018 09B0     		add	sp, sp, #36
 373              	.LCFI14:
 374              		.cfi_remember_state
 375              		.cfi_def_cfa_offset 4
 376              		@ sp needed
 377 001a 5DF804FB 		ldr	pc, [sp], #4
 378              	.LVL14:
 379              	.L30:
 380              	.LCFI15:
 381              		.cfi_restore_state
 382              	.LBB2:
 169:Src/adc.c     ****   
 383              		.loc 1 169 0
 384 001e 0021     		movs	r1, #0
 385 0020 0091     		str	r1, [sp]
 386 0022 234B     		ldr	r3, .L33+12
 387 0024 5A6C     		ldr	r2, [r3, #68]
 388 0026 42F48072 		orr	r2, r2, #256
 389 002a 5A64     		str	r2, [r3, #68]
 390 002c 5B6C     		ldr	r3, [r3, #68]
 391 002e 03F48073 		and	r3, r3, #256
 392 0032 0093     		str	r3, [sp]
 393 0034 009B     		ldr	r3, [sp]
 394              	.LBE2:
 174:Src/adc.c     ****     GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 395              		.loc 1 174 0
 396 0036 1023     		movs	r3, #16
 397 0038 0393     		str	r3, [sp, #12]
 175:Src/adc.c     ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 398              		.loc 1 175 0
 399 003a 0323     		movs	r3, #3
 400 003c 0493     		str	r3, [sp, #16]
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s 			page 12


 176:Src/adc.c     ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 401              		.loc 1 176 0
 402 003e 0591     		str	r1, [sp, #20]
 177:Src/adc.c     **** 
 403              		.loc 1 177 0
 404 0040 03A9     		add	r1, sp, #12
 405 0042 1C48     		ldr	r0, .L33+16
 406              	.LVL15:
 407 0044 FFF7FEFF 		bl	HAL_GPIO_Init
 408              	.LVL16:
 409 0048 E6E7     		b	.L25
 410              	.LVL17:
 411              	.L31:
 412              	.LBB3:
 189:Src/adc.c     ****   
 413              		.loc 1 189 0
 414 004a 0021     		movs	r1, #0
 415 004c 0191     		str	r1, [sp, #4]
 416 004e 184B     		ldr	r3, .L33+12
 417 0050 5A6C     		ldr	r2, [r3, #68]
 418 0052 42F40072 		orr	r2, r2, #512
 419 0056 5A64     		str	r2, [r3, #68]
 420 0058 5B6C     		ldr	r3, [r3, #68]
 421 005a 03F40073 		and	r3, r3, #512
 422 005e 0193     		str	r3, [sp, #4]
 423 0060 019B     		ldr	r3, [sp, #4]
 424              	.LBE3:
 195:Src/adc.c     ****     GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 425              		.loc 1 195 0
 426 0062 0923     		movs	r3, #9
 427 0064 0393     		str	r3, [sp, #12]
 196:Src/adc.c     ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 428              		.loc 1 196 0
 429 0066 0323     		movs	r3, #3
 430 0068 0493     		str	r3, [sp, #16]
 197:Src/adc.c     ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 431              		.loc 1 197 0
 432 006a 0591     		str	r1, [sp, #20]
 198:Src/adc.c     **** 
 433              		.loc 1 198 0
 434 006c 03A9     		add	r1, sp, #12
 435 006e 1148     		ldr	r0, .L33+16
 436              	.LVL18:
 437 0070 FFF7FEFF 		bl	HAL_GPIO_Init
 438              	.LVL19:
 439 0074 D0E7     		b	.L25
 440              	.LVL20:
 441              	.L32:
 442              	.LBB4:
 210:Src/adc.c     ****   
 443              		.loc 1 210 0
 444 0076 0021     		movs	r1, #0
 445 0078 0291     		str	r1, [sp, #8]
 446 007a 0D4B     		ldr	r3, .L33+12
 447 007c 5A6C     		ldr	r2, [r3, #68]
 448 007e 42F48062 		orr	r2, r2, #1024
 449 0082 5A64     		str	r2, [r3, #68]
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s 			page 13


 450 0084 5B6C     		ldr	r3, [r3, #68]
 451 0086 03F48063 		and	r3, r3, #1024
 452 008a 0293     		str	r3, [sp, #8]
 453 008c 029B     		ldr	r3, [sp, #8]
 454              	.LBE4:
 216:Src/adc.c     ****     GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 455              		.loc 1 216 0
 456 008e 0623     		movs	r3, #6
 457 0090 0393     		str	r3, [sp, #12]
 217:Src/adc.c     ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 458              		.loc 1 217 0
 459 0092 0323     		movs	r3, #3
 460 0094 0493     		str	r3, [sp, #16]
 218:Src/adc.c     ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 461              		.loc 1 218 0
 462 0096 0591     		str	r1, [sp, #20]
 219:Src/adc.c     **** 
 463              		.loc 1 219 0
 464 0098 03A9     		add	r1, sp, #12
 465 009a 0648     		ldr	r0, .L33+16
 466              	.LVL21:
 467 009c FFF7FEFF 		bl	HAL_GPIO_Init
 468              	.LVL22:
 469              		.loc 1 225 0
 470 00a0 BAE7     		b	.L25
 471              	.L34:
 472 00a2 00BF     		.align	2
 473              	.L33:
 474 00a4 00200140 		.word	1073815552
 475 00a8 00210140 		.word	1073815808
 476 00ac 00220140 		.word	1073816064
 477 00b0 00380240 		.word	1073887232
 478 00b4 00000240 		.word	1073872896
 479              		.cfi_endproc
 480              	.LFE129:
 482              		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
 483              		.align	1
 484              		.global	HAL_ADC_MspDeInit
 485              		.syntax unified
 486              		.thumb
 487              		.thumb_func
 488              		.fpu fpv4-sp-d16
 490              	HAL_ADC_MspDeInit:
 491              	.LFB130:
 226:Src/adc.c     **** 
 227:Src/adc.c     **** void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
 228:Src/adc.c     **** {
 492              		.loc 1 228 0
 493              		.cfi_startproc
 494              		@ args = 0, pretend = 0, frame = 0
 495              		@ frame_needed = 0, uses_anonymous_args = 0
 496              	.LVL23:
 497 0000 08B5     		push	{r3, lr}
 498              	.LCFI16:
 499              		.cfi_def_cfa_offset 8
 500              		.cfi_offset 3, -8
 501              		.cfi_offset 14, -4
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s 			page 14


 229:Src/adc.c     **** 
 230:Src/adc.c     ****   if(adcHandle->Instance==ADC1)
 502              		.loc 1 230 0
 503 0002 0368     		ldr	r3, [r0]
 504 0004 144A     		ldr	r2, .L43
 505 0006 9342     		cmp	r3, r2
 506 0008 06D0     		beq	.L40
 231:Src/adc.c     ****   {
 232:Src/adc.c     ****   /* USER CODE BEGIN ADC1_MspDeInit 0 */
 233:Src/adc.c     **** 
 234:Src/adc.c     ****   /* USER CODE END ADC1_MspDeInit 0 */
 235:Src/adc.c     ****     /* Peripheral clock disable */
 236:Src/adc.c     ****     __HAL_RCC_ADC1_CLK_DISABLE();
 237:Src/adc.c     ****   
 238:Src/adc.c     ****     /**ADC1 GPIO Configuration    
 239:Src/adc.c     ****     PA4     ------> ADC1_IN4 
 240:Src/adc.c     ****     */
 241:Src/adc.c     ****     HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 242:Src/adc.c     **** 
 243:Src/adc.c     ****   /* USER CODE BEGIN ADC1_MspDeInit 1 */
 244:Src/adc.c     **** 
 245:Src/adc.c     ****   /* USER CODE END ADC1_MspDeInit 1 */
 246:Src/adc.c     ****   }
 247:Src/adc.c     ****   else if(adcHandle->Instance==ADC2)
 507              		.loc 1 247 0
 508 000a 144A     		ldr	r2, .L43+4
 509 000c 9342     		cmp	r3, r2
 510 000e 0ED0     		beq	.L41
 248:Src/adc.c     ****   {
 249:Src/adc.c     ****   /* USER CODE BEGIN ADC2_MspDeInit 0 */
 250:Src/adc.c     **** 
 251:Src/adc.c     ****   /* USER CODE END ADC2_MspDeInit 0 */
 252:Src/adc.c     ****     /* Peripheral clock disable */
 253:Src/adc.c     ****     __HAL_RCC_ADC2_CLK_DISABLE();
 254:Src/adc.c     ****   
 255:Src/adc.c     ****     /**ADC2 GPIO Configuration    
 256:Src/adc.c     ****     PA0-WKUP     ------> ADC2_IN0
 257:Src/adc.c     ****     PA3     ------> ADC2_IN3 
 258:Src/adc.c     ****     */
 259:Src/adc.c     ****     HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_3);
 260:Src/adc.c     **** 
 261:Src/adc.c     ****   /* USER CODE BEGIN ADC2_MspDeInit 1 */
 262:Src/adc.c     **** 
 263:Src/adc.c     ****   /* USER CODE END ADC2_MspDeInit 1 */
 264:Src/adc.c     ****   }
 265:Src/adc.c     ****   else if(adcHandle->Instance==ADC3)
 511              		.loc 1 265 0
 512 0010 134A     		ldr	r2, .L43+8
 513 0012 9342     		cmp	r3, r2
 514 0014 15D0     		beq	.L42
 515              	.LVL24:
 516              	.L35:
 266:Src/adc.c     ****   {
 267:Src/adc.c     ****   /* USER CODE BEGIN ADC3_MspDeInit 0 */
 268:Src/adc.c     **** 
 269:Src/adc.c     ****   /* USER CODE END ADC3_MspDeInit 0 */
 270:Src/adc.c     ****     /* Peripheral clock disable */
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s 			page 15


 271:Src/adc.c     ****     __HAL_RCC_ADC3_CLK_DISABLE();
 272:Src/adc.c     ****   
 273:Src/adc.c     ****     /**ADC3 GPIO Configuration    
 274:Src/adc.c     ****     PA1     ------> ADC3_IN1
 275:Src/adc.c     ****     PA2     ------> ADC3_IN2 
 276:Src/adc.c     ****     */
 277:Src/adc.c     ****     HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1|GPIO_PIN_2);
 278:Src/adc.c     **** 
 279:Src/adc.c     ****   /* USER CODE BEGIN ADC3_MspDeInit 1 */
 280:Src/adc.c     **** 
 281:Src/adc.c     ****   /* USER CODE END ADC3_MspDeInit 1 */
 282:Src/adc.c     ****   }
 283:Src/adc.c     **** } 
 517              		.loc 1 283 0
 518 0016 08BD     		pop	{r3, pc}
 519              	.LVL25:
 520              	.L40:
 236:Src/adc.c     ****   
 521              		.loc 1 236 0
 522 0018 02F58C32 		add	r2, r2, #71680
 523 001c 536C     		ldr	r3, [r2, #68]
 524 001e 23F48073 		bic	r3, r3, #256
 525 0022 5364     		str	r3, [r2, #68]
 241:Src/adc.c     **** 
 526              		.loc 1 241 0
 527 0024 1021     		movs	r1, #16
 528 0026 0F48     		ldr	r0, .L43+12
 529              	.LVL26:
 530 0028 FFF7FEFF 		bl	HAL_GPIO_DeInit
 531              	.LVL27:
 532 002c F3E7     		b	.L35
 533              	.LVL28:
 534              	.L41:
 253:Src/adc.c     ****   
 535              		.loc 1 253 0
 536 002e 0E4A     		ldr	r2, .L43+16
 537 0030 536C     		ldr	r3, [r2, #68]
 538 0032 23F40073 		bic	r3, r3, #512
 539 0036 5364     		str	r3, [r2, #68]
 259:Src/adc.c     **** 
 540              		.loc 1 259 0
 541 0038 0921     		movs	r1, #9
 542 003a 0A48     		ldr	r0, .L43+12
 543              	.LVL29:
 544 003c FFF7FEFF 		bl	HAL_GPIO_DeInit
 545              	.LVL30:
 546 0040 E9E7     		b	.L35
 547              	.LVL31:
 548              	.L42:
 271:Src/adc.c     ****   
 549              		.loc 1 271 0
 550 0042 02F58B32 		add	r2, r2, #71168
 551 0046 536C     		ldr	r3, [r2, #68]
 552 0048 23F48063 		bic	r3, r3, #1024
 553 004c 5364     		str	r3, [r2, #68]
 277:Src/adc.c     **** 
 554              		.loc 1 277 0
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s 			page 16


 555 004e 0621     		movs	r1, #6
 556 0050 0448     		ldr	r0, .L43+12
 557              	.LVL32:
 558 0052 FFF7FEFF 		bl	HAL_GPIO_DeInit
 559              	.LVL33:
 560              		.loc 1 283 0
 561 0056 DEE7     		b	.L35
 562              	.L44:
 563              		.align	2
 564              	.L43:
 565 0058 00200140 		.word	1073815552
 566 005c 00210140 		.word	1073815808
 567 0060 00220140 		.word	1073816064
 568 0064 00000240 		.word	1073872896
 569 0068 00380240 		.word	1073887232
 570              		.cfi_endproc
 571              	.LFE130:
 573              		.section	.text.update_batt_date,"ax",%progbits
 574              		.align	1
 575              		.global	update_batt_date
 576              		.syntax unified
 577              		.thumb
 578              		.thumb_func
 579              		.fpu fpv4-sp-d16
 581              	update_batt_date:
 582              	.LFB131:
 284:Src/adc.c     **** 
 285:Src/adc.c     **** /* USER CODE BEGIN 1 */
 286:Src/adc.c     **** /****************************************************************************************
 287:Src/adc.c     ****  * outline  : update battery(16bit) 
 288:Src/adc.c     ****  * argument : void
 289:Src/adc.c     ****  * return   : void
 290:Src/adc.c     **** ********************************************************************************************/
 291:Src/adc.c     **** void update_batt_date(void)
 292:Src/adc.c     **** {
 583              		.loc 1 292 0
 584              		.cfi_startproc
 585              		@ args = 0, pretend = 0, frame = 16
 586              		@ frame_needed = 0, uses_anonymous_args = 0
 587 0000 10B5     		push	{r4, lr}
 588              	.LCFI17:
 589              		.cfi_def_cfa_offset 8
 590              		.cfi_offset 4, -8
 591              		.cfi_offset 14, -4
 592 0002 84B0     		sub	sp, sp, #16
 593              	.LCFI18:
 594              		.cfi_def_cfa_offset 24
 293:Src/adc.c     ****   ADC_ChannelConfTypeDef sConfig;
 294:Src/adc.c     ****   sConfig.Channel = ADC_CHANNEL_4;
 595              		.loc 1 294 0
 596 0004 0423     		movs	r3, #4
 597 0006 0093     		str	r3, [sp]
 295:Src/adc.c     ****   sConfig.Rank = 1;
 598              		.loc 1 295 0
 599 0008 0123     		movs	r3, #1
 600 000a 0193     		str	r3, [sp, #4]
 296:Src/adc.c     ****   sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s 			page 17


 601              		.loc 1 296 0
 602 000c 0323     		movs	r3, #3
 603 000e 0293     		str	r3, [sp, #8]
 297:Src/adc.c     ****   HAL_ADC_ConfigChannel( &hadc1, &sConfig );  // setting store
 604              		.loc 1 297 0
 605 0010 0C4C     		ldr	r4, .L48
 606 0012 6946     		mov	r1, sp
 607 0014 2046     		mov	r0, r4
 608 0016 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 609              	.LVL34:
 298:Src/adc.c     ****   HAL_ADC_Start( &hadc1 );     // ad convert start
 610              		.loc 1 298 0
 611 001a 2046     		mov	r0, r4
 612 001c FFF7FEFF 		bl	HAL_ADC_Start
 613              	.LVL35:
 614              	.L46:
 299:Src/adc.c     ****   while( HAL_ADC_PollForConversion( &hadc1,50 ) != HAL_OK );  // trans
 615              		.loc 1 299 0 discriminator 1
 616 0020 3221     		movs	r1, #50
 617 0022 0848     		ldr	r0, .L48
 618 0024 FFF7FEFF 		bl	HAL_ADC_PollForConversion
 619              	.LVL36:
 620 0028 0028     		cmp	r0, #0
 621 002a F9D1     		bne	.L46
 300:Src/adc.c     ****   batt_analog=HAL_ADC_GetValue(&hadc1);
 622              		.loc 1 300 0
 623 002c 054C     		ldr	r4, .L48
 624 002e 2046     		mov	r0, r4
 625 0030 FFF7FEFF 		bl	HAL_ADC_GetValue
 626              	.LVL37:
 627 0034 044B     		ldr	r3, .L48+4
 628 0036 1880     		strh	r0, [r3]	@ movhi
 301:Src/adc.c     ****   HAL_ADC_Stop(&hadc1);
 629              		.loc 1 301 0
 630 0038 2046     		mov	r0, r4
 631 003a FFF7FEFF 		bl	HAL_ADC_Stop
 632              	.LVL38:
 302:Src/adc.c     **** }
 633              		.loc 1 302 0
 634 003e 04B0     		add	sp, sp, #16
 635              	.LCFI19:
 636              		.cfi_def_cfa_offset 8
 637              		@ sp needed
 638 0040 10BD     		pop	{r4, pc}
 639              	.L49:
 640 0042 00BF     		.align	2
 641              	.L48:
 642 0044 00000000 		.word	hadc1
 643 0048 00000000 		.word	batt_analog
 644              		.cfi_endproc
 645              	.LFE131:
 647              		.section	.text.update_fr_sen_on,"ax",%progbits
 648              		.align	1
 649              		.global	update_fr_sen_on
 650              		.syntax unified
 651              		.thumb
 652              		.thumb_func
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s 			page 18


 653              		.fpu fpv4-sp-d16
 655              	update_fr_sen_on:
 656              	.LFB132:
 303:Src/adc.c     **** 
 304:Src/adc.c     **** /****************************************************************************************
 305:Src/adc.c     ****  * outline  : update front sensor
 306:Src/adc.c     ****  * argument : void
 307:Src/adc.c     ****  * return   : void
 308:Src/adc.c     **** ********************************************************************************************/
 309:Src/adc.c     **** void update_fr_sen_on(void)
 310:Src/adc.c     **** {
 657              		.loc 1 310 0
 658              		.cfi_startproc
 659              		@ args = 0, pretend = 0, frame = 16
 660              		@ frame_needed = 0, uses_anonymous_args = 0
 661 0000 10B5     		push	{r4, lr}
 662              	.LCFI20:
 663              		.cfi_def_cfa_offset 8
 664              		.cfi_offset 4, -8
 665              		.cfi_offset 14, -4
 666 0002 84B0     		sub	sp, sp, #16
 667              	.LCFI21:
 668              		.cfi_def_cfa_offset 24
 311:Src/adc.c     ****   ADC_ChannelConfTypeDef sConfig;
 312:Src/adc.c     ****   sConfig.Rank = 1;
 669              		.loc 1 312 0
 670 0004 0123     		movs	r3, #1
 671 0006 0193     		str	r3, [sp, #4]
 313:Src/adc.c     ****   sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 672              		.loc 1 313 0
 673 0008 0323     		movs	r3, #3
 674 000a 0293     		str	r3, [sp, #8]
 314:Src/adc.c     **** 
 315:Src/adc.c     ****   sConfig.Channel = ADC_CHANNEL_0;
 675              		.loc 1 315 0
 676 000c 04A9     		add	r1, sp, #16
 677 000e 0023     		movs	r3, #0
 678 0010 41F8103D 		str	r3, [r1, #-16]!
 316:Src/adc.c     ****   HAL_ADC_ConfigChannel( &hadc2, &sConfig );  // setting store
 679              		.loc 1 316 0
 680 0014 184C     		ldr	r4, .L54
 681 0016 2046     		mov	r0, r4
 682 0018 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 683              	.LVL39:
 317:Src/adc.c     ****   HAL_ADC_Start( &hadc2 );     // ad convert start
 684              		.loc 1 317 0
 685 001c 2046     		mov	r0, r4
 686 001e FFF7FEFF 		bl	HAL_ADC_Start
 687              	.LVL40:
 688              	.L51:
 318:Src/adc.c     ****   while( HAL_ADC_PollForConversion( &hadc2,50 ) != HAL_OK );  // trans
 689              		.loc 1 318 0 discriminator 1
 690 0022 3221     		movs	r1, #50
 691 0024 1448     		ldr	r0, .L54
 692 0026 FFF7FEFF 		bl	HAL_ADC_PollForConversion
 693              	.LVL41:
 694 002a 0028     		cmp	r0, #0
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s 			page 19


 695 002c F9D1     		bne	.L51
 319:Src/adc.c     ****   sensor.adc_on[0] = HAL_ADC_GetValue(&hadc2);
 696              		.loc 1 319 0
 697 002e 124C     		ldr	r4, .L54
 698 0030 2046     		mov	r0, r4
 699 0032 FFF7FEFF 		bl	HAL_ADC_GetValue
 700              	.LVL42:
 701 0036 114B     		ldr	r3, .L54+4
 702 0038 1880     		strh	r0, [r3]	@ movhi
 320:Src/adc.c     ****   HAL_ADC_Stop(&hadc2);
 703              		.loc 1 320 0
 704 003a 2046     		mov	r0, r4
 705 003c FFF7FEFF 		bl	HAL_ADC_Stop
 706              	.LVL43:
 321:Src/adc.c     **** 
 322:Src/adc.c     ****   sConfig.Channel = ADC_CHANNEL_3;
 707              		.loc 1 322 0
 708 0040 04A9     		add	r1, sp, #16
 709 0042 0323     		movs	r3, #3
 710 0044 41F8103D 		str	r3, [r1, #-16]!
 323:Src/adc.c     ****   HAL_ADC_ConfigChannel( &hadc2, &sConfig );  // setting store
 711              		.loc 1 323 0
 712 0048 2046     		mov	r0, r4
 713 004a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 714              	.LVL44:
 324:Src/adc.c     ****   HAL_ADC_Start( &hadc2 );     // ad convert start
 715              		.loc 1 324 0
 716 004e 2046     		mov	r0, r4
 717 0050 FFF7FEFF 		bl	HAL_ADC_Start
 718              	.LVL45:
 719              	.L52:
 325:Src/adc.c     ****   while( HAL_ADC_PollForConversion( &hadc2,50 ) != HAL_OK );  // trans
 720              		.loc 1 325 0 discriminator 1
 721 0054 3221     		movs	r1, #50
 722 0056 0848     		ldr	r0, .L54
 723 0058 FFF7FEFF 		bl	HAL_ADC_PollForConversion
 724              	.LVL46:
 725 005c 0028     		cmp	r0, #0
 726 005e F9D1     		bne	.L52
 326:Src/adc.c     ****   sensor.adc_on[3] = HAL_ADC_GetValue(&hadc2);
 727              		.loc 1 326 0
 728 0060 054C     		ldr	r4, .L54
 729 0062 2046     		mov	r0, r4
 730 0064 FFF7FEFF 		bl	HAL_ADC_GetValue
 731              	.LVL47:
 732 0068 044B     		ldr	r3, .L54+4
 733 006a D880     		strh	r0, [r3, #6]	@ movhi
 327:Src/adc.c     ****   HAL_ADC_Stop(&hadc2);
 734              		.loc 1 327 0
 735 006c 2046     		mov	r0, r4
 736 006e FFF7FEFF 		bl	HAL_ADC_Stop
 737              	.LVL48:
 328:Src/adc.c     **** }
 738              		.loc 1 328 0
 739 0072 04B0     		add	sp, sp, #16
 740              	.LCFI22:
 741              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s 			page 20


 742              		@ sp needed
 743 0074 10BD     		pop	{r4, pc}
 744              	.L55:
 745 0076 00BF     		.align	2
 746              	.L54:
 747 0078 00000000 		.word	hadc2
 748 007c 00000000 		.word	sensor
 749              		.cfi_endproc
 750              	.LFE132:
 752              		.section	.text.update_side_sen_on,"ax",%progbits
 753              		.align	1
 754              		.global	update_side_sen_on
 755              		.syntax unified
 756              		.thumb
 757              		.thumb_func
 758              		.fpu fpv4-sp-d16
 760              	update_side_sen_on:
 761              	.LFB133:
 329:Src/adc.c     **** 
 330:Src/adc.c     **** 
 331:Src/adc.c     **** /****************************************************************************************
 332:Src/adc.c     ****  * outline  : update battery 
 333:Src/adc.c     ****  * argument : void
 334:Src/adc.c     ****  * return   : void
 335:Src/adc.c     **** ********************************************************************************************/
 336:Src/adc.c     **** void update_side_sen_on(void)
 337:Src/adc.c     **** {
 762              		.loc 1 337 0
 763              		.cfi_startproc
 764              		@ args = 0, pretend = 0, frame = 16
 765              		@ frame_needed = 0, uses_anonymous_args = 0
 766 0000 10B5     		push	{r4, lr}
 767              	.LCFI23:
 768              		.cfi_def_cfa_offset 8
 769              		.cfi_offset 4, -8
 770              		.cfi_offset 14, -4
 771 0002 84B0     		sub	sp, sp, #16
 772              	.LCFI24:
 773              		.cfi_def_cfa_offset 24
 338:Src/adc.c     ****   ADC_ChannelConfTypeDef sConfig;
 339:Src/adc.c     ****   sConfig.Rank = 1;
 774              		.loc 1 339 0
 775 0004 0123     		movs	r3, #1
 776 0006 0193     		str	r3, [sp, #4]
 340:Src/adc.c     ****   sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 777              		.loc 1 340 0
 778 0008 0322     		movs	r2, #3
 779 000a 0292     		str	r2, [sp, #8]
 341:Src/adc.c     **** 
 342:Src/adc.c     ****   sConfig.Channel = ADC_CHANNEL_1;
 780              		.loc 1 342 0
 781 000c 04A9     		add	r1, sp, #16
 782 000e 41F8103D 		str	r3, [r1, #-16]!
 343:Src/adc.c     ****   HAL_ADC_ConfigChannel( &hadc3, &sConfig );  // setting store
 783              		.loc 1 343 0
 784 0012 184C     		ldr	r4, .L60
 785 0014 2046     		mov	r0, r4
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s 			page 21


 786 0016 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 787              	.LVL49:
 344:Src/adc.c     ****   HAL_ADC_Start( &hadc3 );     // ad convert start
 788              		.loc 1 344 0
 789 001a 2046     		mov	r0, r4
 790 001c FFF7FEFF 		bl	HAL_ADC_Start
 791              	.LVL50:
 792              	.L57:
 345:Src/adc.c     ****   while( HAL_ADC_PollForConversion( &hadc3,50 ) != HAL_OK );  // trans
 793              		.loc 1 345 0 discriminator 1
 794 0020 3221     		movs	r1, #50
 795 0022 1448     		ldr	r0, .L60
 796 0024 FFF7FEFF 		bl	HAL_ADC_PollForConversion
 797              	.LVL51:
 798 0028 0028     		cmp	r0, #0
 799 002a F9D1     		bne	.L57
 346:Src/adc.c     ****   sensor.adc_on[1] = HAL_ADC_GetValue(&hadc3);
 800              		.loc 1 346 0
 801 002c 114C     		ldr	r4, .L60
 802 002e 2046     		mov	r0, r4
 803 0030 FFF7FEFF 		bl	HAL_ADC_GetValue
 804              	.LVL52:
 805 0034 104B     		ldr	r3, .L60+4
 806 0036 5880     		strh	r0, [r3, #2]	@ movhi
 347:Src/adc.c     ****   HAL_ADC_Stop(&hadc3);
 807              		.loc 1 347 0
 808 0038 2046     		mov	r0, r4
 809 003a FFF7FEFF 		bl	HAL_ADC_Stop
 810              	.LVL53:
 348:Src/adc.c     **** 
 349:Src/adc.c     ****   sConfig.Channel = ADC_CHANNEL_2;
 811              		.loc 1 349 0
 812 003e 04A9     		add	r1, sp, #16
 813 0040 0223     		movs	r3, #2
 814 0042 41F8103D 		str	r3, [r1, #-16]!
 350:Src/adc.c     ****   HAL_ADC_ConfigChannel( &hadc3, &sConfig );  // setting store
 815              		.loc 1 350 0
 816 0046 2046     		mov	r0, r4
 817 0048 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 818              	.LVL54:
 351:Src/adc.c     ****   HAL_ADC_Start( &hadc3 );     // ad convert start
 819              		.loc 1 351 0
 820 004c 2046     		mov	r0, r4
 821 004e FFF7FEFF 		bl	HAL_ADC_Start
 822              	.LVL55:
 823              	.L58:
 352:Src/adc.c     ****   while( HAL_ADC_PollForConversion( &hadc3,50 ) != HAL_OK );  // trans
 824              		.loc 1 352 0 discriminator 1
 825 0052 3221     		movs	r1, #50
 826 0054 0748     		ldr	r0, .L60
 827 0056 FFF7FEFF 		bl	HAL_ADC_PollForConversion
 828              	.LVL56:
 829 005a 0028     		cmp	r0, #0
 830 005c F9D1     		bne	.L58
 353:Src/adc.c     ****   sensor.adc_on[2] = HAL_ADC_GetValue(&hadc3);
 831              		.loc 1 353 0
 832 005e 054C     		ldr	r4, .L60
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s 			page 22


 833 0060 2046     		mov	r0, r4
 834 0062 FFF7FEFF 		bl	HAL_ADC_GetValue
 835              	.LVL57:
 836 0066 044B     		ldr	r3, .L60+4
 837 0068 9880     		strh	r0, [r3, #4]	@ movhi
 354:Src/adc.c     ****   HAL_ADC_Stop(&hadc3);
 838              		.loc 1 354 0
 839 006a 2046     		mov	r0, r4
 840 006c FFF7FEFF 		bl	HAL_ADC_Stop
 841              	.LVL58:
 355:Src/adc.c     **** }
 842              		.loc 1 355 0
 843 0070 04B0     		add	sp, sp, #16
 844              	.LCFI25:
 845              		.cfi_def_cfa_offset 8
 846              		@ sp needed
 847 0072 10BD     		pop	{r4, pc}
 848              	.L61:
 849              		.align	2
 850              	.L60:
 851 0074 00000000 		.word	hadc3
 852 0078 00000000 		.word	sensor
 853              		.cfi_endproc
 854              	.LFE133:
 856              		.section	.text.update_fr_sen_off,"ax",%progbits
 857              		.align	1
 858              		.global	update_fr_sen_off
 859              		.syntax unified
 860              		.thumb
 861              		.thumb_func
 862              		.fpu fpv4-sp-d16
 864              	update_fr_sen_off:
 865              	.LFB134:
 356:Src/adc.c     **** 
 357:Src/adc.c     **** /****************************************************************************************
 358:Src/adc.c     ****  * outline  : update front sensor value
 359:Src/adc.c     ****  * argument : void
 360:Src/adc.c     ****  * return   : void
 361:Src/adc.c     **** ********************************************************************************************/
 362:Src/adc.c     **** void update_fr_sen_off(void)
 363:Src/adc.c     **** {
 866              		.loc 1 363 0
 867              		.cfi_startproc
 868              		@ args = 0, pretend = 0, frame = 16
 869              		@ frame_needed = 0, uses_anonymous_args = 0
 870 0000 10B5     		push	{r4, lr}
 871              	.LCFI26:
 872              		.cfi_def_cfa_offset 8
 873              		.cfi_offset 4, -8
 874              		.cfi_offset 14, -4
 875 0002 84B0     		sub	sp, sp, #16
 876              	.LCFI27:
 877              		.cfi_def_cfa_offset 24
 364:Src/adc.c     ****   ADC_ChannelConfTypeDef sConfig;
 365:Src/adc.c     ****   sConfig.Rank = 1;
 878              		.loc 1 365 0
 879 0004 0123     		movs	r3, #1
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s 			page 23


 880 0006 0193     		str	r3, [sp, #4]
 366:Src/adc.c     ****   sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 881              		.loc 1 366 0
 882 0008 0323     		movs	r3, #3
 883 000a 0293     		str	r3, [sp, #8]
 367:Src/adc.c     **** 
 368:Src/adc.c     ****   sConfig.Channel = ADC_CHANNEL_0;
 884              		.loc 1 368 0
 885 000c 04A9     		add	r1, sp, #16
 886 000e 0023     		movs	r3, #0
 887 0010 41F8103D 		str	r3, [r1, #-16]!
 369:Src/adc.c     ****   HAL_ADC_ConfigChannel( &hadc2, &sConfig );  // setting store
 888              		.loc 1 369 0
 889 0014 184C     		ldr	r4, .L66
 890 0016 2046     		mov	r0, r4
 891 0018 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 892              	.LVL59:
 370:Src/adc.c     ****   HAL_ADC_Start( &hadc2 );     // ad convert start
 893              		.loc 1 370 0
 894 001c 2046     		mov	r0, r4
 895 001e FFF7FEFF 		bl	HAL_ADC_Start
 896              	.LVL60:
 897              	.L63:
 371:Src/adc.c     ****   while( HAL_ADC_PollForConversion( &hadc2,50 ) != HAL_OK );  // trans
 898              		.loc 1 371 0 discriminator 1
 899 0022 3221     		movs	r1, #50
 900 0024 1448     		ldr	r0, .L66
 901 0026 FFF7FEFF 		bl	HAL_ADC_PollForConversion
 902              	.LVL61:
 903 002a 0028     		cmp	r0, #0
 904 002c F9D1     		bne	.L63
 372:Src/adc.c     ****   sensor.adc_off[0] = HAL_ADC_GetValue(&hadc2);
 905              		.loc 1 372 0
 906 002e 124C     		ldr	r4, .L66
 907 0030 2046     		mov	r0, r4
 908 0032 FFF7FEFF 		bl	HAL_ADC_GetValue
 909              	.LVL62:
 910 0036 114B     		ldr	r3, .L66+4
 911 0038 1881     		strh	r0, [r3, #8]	@ movhi
 373:Src/adc.c     ****   HAL_ADC_Stop(&hadc2);
 912              		.loc 1 373 0
 913 003a 2046     		mov	r0, r4
 914 003c FFF7FEFF 		bl	HAL_ADC_Stop
 915              	.LVL63:
 374:Src/adc.c     **** 
 375:Src/adc.c     ****   sConfig.Channel = ADC_CHANNEL_3;
 916              		.loc 1 375 0
 917 0040 04A9     		add	r1, sp, #16
 918 0042 0323     		movs	r3, #3
 919 0044 41F8103D 		str	r3, [r1, #-16]!
 376:Src/adc.c     ****   HAL_ADC_ConfigChannel( &hadc2, &sConfig );  // setting store
 920              		.loc 1 376 0
 921 0048 2046     		mov	r0, r4
 922 004a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 923              	.LVL64:
 377:Src/adc.c     ****   HAL_ADC_Start( &hadc2 );     // ad convert start
 924              		.loc 1 377 0
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s 			page 24


 925 004e 2046     		mov	r0, r4
 926 0050 FFF7FEFF 		bl	HAL_ADC_Start
 927              	.LVL65:
 928              	.L64:
 378:Src/adc.c     ****   while( HAL_ADC_PollForConversion( &hadc2,50 ) != HAL_OK );  // trans
 929              		.loc 1 378 0 discriminator 1
 930 0054 3221     		movs	r1, #50
 931 0056 0848     		ldr	r0, .L66
 932 0058 FFF7FEFF 		bl	HAL_ADC_PollForConversion
 933              	.LVL66:
 934 005c 0028     		cmp	r0, #0
 935 005e F9D1     		bne	.L64
 379:Src/adc.c     ****   sensor.adc_off[3] = HAL_ADC_GetValue(&hadc2);
 936              		.loc 1 379 0
 937 0060 054C     		ldr	r4, .L66
 938 0062 2046     		mov	r0, r4
 939 0064 FFF7FEFF 		bl	HAL_ADC_GetValue
 940              	.LVL67:
 941 0068 044B     		ldr	r3, .L66+4
 942 006a D881     		strh	r0, [r3, #14]	@ movhi
 380:Src/adc.c     ****   HAL_ADC_Stop(&hadc2);
 943              		.loc 1 380 0
 944 006c 2046     		mov	r0, r4
 945 006e FFF7FEFF 		bl	HAL_ADC_Stop
 946              	.LVL68:
 381:Src/adc.c     **** }
 947              		.loc 1 381 0
 948 0072 04B0     		add	sp, sp, #16
 949              	.LCFI28:
 950              		.cfi_def_cfa_offset 8
 951              		@ sp needed
 952 0074 10BD     		pop	{r4, pc}
 953              	.L67:
 954 0076 00BF     		.align	2
 955              	.L66:
 956 0078 00000000 		.word	hadc2
 957 007c 00000000 		.word	sensor
 958              		.cfi_endproc
 959              	.LFE134:
 961              		.section	.text.update_side_sen_off,"ax",%progbits
 962              		.align	1
 963              		.global	update_side_sen_off
 964              		.syntax unified
 965              		.thumb
 966              		.thumb_func
 967              		.fpu fpv4-sp-d16
 969              	update_side_sen_off:
 970              	.LFB135:
 382:Src/adc.c     **** /****************************************************************************************
 383:Src/adc.c     ****  * outline  : update side sensor value
 384:Src/adc.c     ****  * argument : void
 385:Src/adc.c     ****  * return   : void
 386:Src/adc.c     **** ********************************************************************************************/
 387:Src/adc.c     **** void update_side_sen_off(void)
 388:Src/adc.c     **** {
 971              		.loc 1 388 0
 972              		.cfi_startproc
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s 			page 25


 973              		@ args = 0, pretend = 0, frame = 16
 974              		@ frame_needed = 0, uses_anonymous_args = 0
 975 0000 10B5     		push	{r4, lr}
 976              	.LCFI29:
 977              		.cfi_def_cfa_offset 8
 978              		.cfi_offset 4, -8
 979              		.cfi_offset 14, -4
 980 0002 84B0     		sub	sp, sp, #16
 981              	.LCFI30:
 982              		.cfi_def_cfa_offset 24
 389:Src/adc.c     ****   ADC_ChannelConfTypeDef sConfig;
 390:Src/adc.c     ****   sConfig.Rank = 1;
 983              		.loc 1 390 0
 984 0004 0123     		movs	r3, #1
 985 0006 0193     		str	r3, [sp, #4]
 391:Src/adc.c     ****   sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 986              		.loc 1 391 0
 987 0008 0322     		movs	r2, #3
 988 000a 0292     		str	r2, [sp, #8]
 392:Src/adc.c     **** 
 393:Src/adc.c     ****   sConfig.Channel = ADC_CHANNEL_1;
 989              		.loc 1 393 0
 990 000c 04A9     		add	r1, sp, #16
 991 000e 41F8103D 		str	r3, [r1, #-16]!
 394:Src/adc.c     ****   HAL_ADC_ConfigChannel( &hadc3, &sConfig );  // setting store
 992              		.loc 1 394 0
 993 0012 184C     		ldr	r4, .L72
 994 0014 2046     		mov	r0, r4
 995 0016 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 996              	.LVL69:
 395:Src/adc.c     ****   HAL_ADC_Start( &hadc3 );     // ad convert start
 997              		.loc 1 395 0
 998 001a 2046     		mov	r0, r4
 999 001c FFF7FEFF 		bl	HAL_ADC_Start
 1000              	.LVL70:
 1001              	.L69:
 396:Src/adc.c     ****   while( HAL_ADC_PollForConversion( &hadc3,50 ) != HAL_OK );  // trans
 1002              		.loc 1 396 0 discriminator 1
 1003 0020 3221     		movs	r1, #50
 1004 0022 1448     		ldr	r0, .L72
 1005 0024 FFF7FEFF 		bl	HAL_ADC_PollForConversion
 1006              	.LVL71:
 1007 0028 0028     		cmp	r0, #0
 1008 002a F9D1     		bne	.L69
 397:Src/adc.c     ****   sensor.adc_off[1] = HAL_ADC_GetValue(&hadc3);
 1009              		.loc 1 397 0
 1010 002c 114C     		ldr	r4, .L72
 1011 002e 2046     		mov	r0, r4
 1012 0030 FFF7FEFF 		bl	HAL_ADC_GetValue
 1013              	.LVL72:
 1014 0034 104B     		ldr	r3, .L72+4
 1015 0036 5881     		strh	r0, [r3, #10]	@ movhi
 398:Src/adc.c     ****   HAL_ADC_Stop(&hadc3);
 1016              		.loc 1 398 0
 1017 0038 2046     		mov	r0, r4
 1018 003a FFF7FEFF 		bl	HAL_ADC_Stop
 1019              	.LVL73:
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s 			page 26


 399:Src/adc.c     **** 
 400:Src/adc.c     ****   sConfig.Channel = ADC_CHANNEL_2;
 1020              		.loc 1 400 0
 1021 003e 04A9     		add	r1, sp, #16
 1022 0040 0223     		movs	r3, #2
 1023 0042 41F8103D 		str	r3, [r1, #-16]!
 401:Src/adc.c     ****   HAL_ADC_ConfigChannel( &hadc3, &sConfig );  // setting store
 1024              		.loc 1 401 0
 1025 0046 2046     		mov	r0, r4
 1026 0048 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1027              	.LVL74:
 402:Src/adc.c     ****   HAL_ADC_Start( &hadc3 );     // ad convert start
 1028              		.loc 1 402 0
 1029 004c 2046     		mov	r0, r4
 1030 004e FFF7FEFF 		bl	HAL_ADC_Start
 1031              	.LVL75:
 1032              	.L70:
 403:Src/adc.c     ****   while( HAL_ADC_PollForConversion( &hadc3,50 ) != HAL_OK );  // trans
 1033              		.loc 1 403 0 discriminator 1
 1034 0052 3221     		movs	r1, #50
 1035 0054 0748     		ldr	r0, .L72
 1036 0056 FFF7FEFF 		bl	HAL_ADC_PollForConversion
 1037              	.LVL76:
 1038 005a 0028     		cmp	r0, #0
 1039 005c F9D1     		bne	.L70
 404:Src/adc.c     ****   sensor.adc_off[2] = HAL_ADC_GetValue(&hadc3);
 1040              		.loc 1 404 0
 1041 005e 054C     		ldr	r4, .L72
 1042 0060 2046     		mov	r0, r4
 1043 0062 FFF7FEFF 		bl	HAL_ADC_GetValue
 1044              	.LVL77:
 1045 0066 044B     		ldr	r3, .L72+4
 1046 0068 9881     		strh	r0, [r3, #12]	@ movhi
 405:Src/adc.c     ****   HAL_ADC_Stop(&hadc3);
 1047              		.loc 1 405 0
 1048 006a 2046     		mov	r0, r4
 1049 006c FFF7FEFF 		bl	HAL_ADC_Stop
 1050              	.LVL78:
 406:Src/adc.c     **** }
 1051              		.loc 1 406 0
 1052 0070 04B0     		add	sp, sp, #16
 1053              	.LCFI31:
 1054              		.cfi_def_cfa_offset 8
 1055              		@ sp needed
 1056 0072 10BD     		pop	{r4, pc}
 1057              	.L73:
 1058              		.align	2
 1059              	.L72:
 1060 0074 00000000 		.word	hadc3
 1061 0078 00000000 		.word	sensor
 1062              		.cfi_endproc
 1063              	.LFE135:
 1065              		.section	.text.update_wall,"ax",%progbits
 1066              		.align	1
 1067              		.global	update_wall
 1068              		.syntax unified
 1069              		.thumb
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s 			page 27


 1070              		.thumb_func
 1071              		.fpu fpv4-sp-d16
 1073              	update_wall:
 1074              	.LFB136:
 407:Src/adc.c     **** /****************************************************************************************
 408:Src/adc.c     ****  * outline  : update wall
 409:Src/adc.c     ****  * argument : void
 410:Src/adc.c     ****  * return   : void
 411:Src/adc.c     **** ********************************************************************************************/
 412:Src/adc.c     **** void update_wall(void){
 1075              		.loc 1 412 0
 1076              		.cfi_startproc
 1077              		@ args = 0, pretend = 0, frame = 0
 1078              		@ frame_needed = 0, uses_anonymous_args = 0
 1079              		@ link register save eliminated.
 1080              	.LVL79:
 1081              	.LBB5:
 413:Src/adc.c     ****   for( int i=0;i<4;i++){
 1082              		.loc 1 413 0
 1083 0000 0023     		movs	r3, #0
 1084 0002 0BE0     		b	.L75
 1085              	.LVL80:
 1086              	.L76:
 414:Src/adc.c     ****     sensor.adc[i] = sensor.adc_on[i] - sensor.adc_off[i];
 1087              		.loc 1 414 0 discriminator 3
 1088 0004 334A     		ldr	r2, .L89
 1089 0006 32F81310 		ldrh	r1, [r2, r3, lsl #1]
 1090 000a 181D     		adds	r0, r3, #4
 1091 000c 32F81000 		ldrh	r0, [r2, r0, lsl #1]
 1092 0010 091A     		subs	r1, r1, r0
 1093 0012 03F10800 		add	r0, r3, #8
 1094 0016 22F81010 		strh	r1, [r2, r0, lsl #1]	@ movhi
 413:Src/adc.c     ****   for( int i=0;i<4;i++){
 1095              		.loc 1 413 0 discriminator 3
 1096 001a 0133     		adds	r3, r3, #1
 1097              	.LVL81:
 1098              	.L75:
 413:Src/adc.c     ****   for( int i=0;i<4;i++){
 1099              		.loc 1 413 0 is_stmt 0 discriminator 1
 1100 001c 032B     		cmp	r3, #3
 1101 001e F1DD     		ble	.L76
 1102              	.LBE5:
 415:Src/adc.c     ****   }
 416:Src/adc.c     ****   
 417:Src/adc.c     ****   if(sensor.adc[0] > threshhold_0){
 1103              		.loc 1 417 0 is_stmt 1
 1104 0020 2C4B     		ldr	r3, .L89
 1105              	.LVL82:
 1106 0022 1A8A     		ldrh	r2, [r3, #16]
 1107 0024 40F65C53 		movw	r3, #3420
 1108 0028 9A42     		cmp	r2, r3
 1109 002a 0BD9     		bls	.L77
 418:Src/adc.c     ****     if(sensor.count[0] > 20){
 1110              		.loc 1 418 0
 1111 002c 294B     		ldr	r3, .L89
 1112 002e 1B8C     		ldrh	r3, [r3, #32]
 1113 0030 142B     		cmp	r3, #20
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s 			page 28


 1114 0032 03D9     		bls	.L78
 419:Src/adc.c     ****       sensor.wall[0] = true;
 1115              		.loc 1 419 0
 1116 0034 274B     		ldr	r3, .L89
 1117 0036 0122     		movs	r2, #1
 1118 0038 1A83     		strh	r2, [r3, #24]	@ movhi
 1119 003a 07E0     		b	.L79
 1120              	.L78:
 420:Src/adc.c     ****     } else{
 421:Src/adc.c     ****       sensor.count[0] ++;
 1121              		.loc 1 421 0
 1122 003c 0133     		adds	r3, r3, #1
 1123 003e 254A     		ldr	r2, .L89
 1124 0040 1384     		strh	r3, [r2, #32]	@ movhi
 1125 0042 03E0     		b	.L79
 1126              	.L77:
 422:Src/adc.c     ****     }
 423:Src/adc.c     ****   }else{
 424:Src/adc.c     ****     sensor.wall[0] = false;
 1127              		.loc 1 424 0
 1128 0044 234B     		ldr	r3, .L89
 1129 0046 0022     		movs	r2, #0
 1130 0048 1A83     		strh	r2, [r3, #24]	@ movhi
 425:Src/adc.c     ****     sensor.count[0] = 0;
 1131              		.loc 1 425 0
 1132 004a 1A84     		strh	r2, [r3, #32]	@ movhi
 1133              	.L79:
 426:Src/adc.c     ****   }
 427:Src/adc.c     ****   
 428:Src/adc.c     ****   if(sensor.adc[1] > threshhold_1){
 1134              		.loc 1 428 0
 1135 004c 214B     		ldr	r3, .L89
 1136 004e 5A8A     		ldrh	r2, [r3, #18]
 1137 0050 40F64853 		movw	r3, #3400
 1138 0054 9A42     		cmp	r2, r3
 1139 0056 0BD9     		bls	.L80
 429:Src/adc.c     ****     if(sensor.count[1] > 20){
 1140              		.loc 1 429 0
 1141 0058 1E4B     		ldr	r3, .L89
 1142 005a 5B8C     		ldrh	r3, [r3, #34]
 1143 005c 142B     		cmp	r3, #20
 1144 005e 03D9     		bls	.L81
 430:Src/adc.c     ****       sensor.wall[1] = true;
 1145              		.loc 1 430 0
 1146 0060 1C4B     		ldr	r3, .L89
 1147 0062 0122     		movs	r2, #1
 1148 0064 5A83     		strh	r2, [r3, #26]	@ movhi
 1149 0066 07E0     		b	.L82
 1150              	.L81:
 431:Src/adc.c     ****     } else{
 432:Src/adc.c     ****       sensor.count[1] ++;
 1151              		.loc 1 432 0
 1152 0068 0133     		adds	r3, r3, #1
 1153 006a 1A4A     		ldr	r2, .L89
 1154 006c 5384     		strh	r3, [r2, #34]	@ movhi
 1155 006e 03E0     		b	.L82
 1156              	.L80:
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s 			page 29


 433:Src/adc.c     ****     }
 434:Src/adc.c     ****   }else{
 435:Src/adc.c     ****     sensor.wall[1] = false;
 1157              		.loc 1 435 0
 1158 0070 184B     		ldr	r3, .L89
 1159 0072 0022     		movs	r2, #0
 1160 0074 5A83     		strh	r2, [r3, #26]	@ movhi
 436:Src/adc.c     ****     sensor.count[1] = 0;
 1161              		.loc 1 436 0
 1162 0076 5A84     		strh	r2, [r3, #34]	@ movhi
 1163              	.L82:
 437:Src/adc.c     ****   }
 438:Src/adc.c     **** 
 439:Src/adc.c     ****   if(sensor.adc[2] > threshhold_2){
 1164              		.loc 1 439 0
 1165 0078 164B     		ldr	r3, .L89
 1166 007a 9A8A     		ldrh	r2, [r3, #20]
 1167 007c 40F6F843 		movw	r3, #3320
 1168 0080 9A42     		cmp	r2, r3
 1169 0082 0BD9     		bls	.L83
 440:Src/adc.c     ****     if(sensor.count[2] > 20){
 1170              		.loc 1 440 0
 1171 0084 134B     		ldr	r3, .L89
 1172 0086 9B8C     		ldrh	r3, [r3, #36]
 1173 0088 142B     		cmp	r3, #20
 1174 008a 03D9     		bls	.L84
 441:Src/adc.c     ****       sensor.wall[2] = true;
 1175              		.loc 1 441 0
 1176 008c 114B     		ldr	r3, .L89
 1177 008e 0122     		movs	r2, #1
 1178 0090 9A83     		strh	r2, [r3, #28]	@ movhi
 1179 0092 07E0     		b	.L85
 1180              	.L84:
 442:Src/adc.c     ****     } else{
 443:Src/adc.c     ****       sensor.count[2] ++;
 1181              		.loc 1 443 0
 1182 0094 0133     		adds	r3, r3, #1
 1183 0096 0F4A     		ldr	r2, .L89
 1184 0098 9384     		strh	r3, [r2, #36]	@ movhi
 1185 009a 03E0     		b	.L85
 1186              	.L83:
 444:Src/adc.c     ****     }
 445:Src/adc.c     ****   }else{
 446:Src/adc.c     ****     sensor.wall[2] = false;
 1187              		.loc 1 446 0
 1188 009c 0D4B     		ldr	r3, .L89
 1189 009e 0022     		movs	r2, #0
 1190 00a0 9A83     		strh	r2, [r3, #28]	@ movhi
 447:Src/adc.c     ****     sensor.count[2] = 0;
 1191              		.loc 1 447 0
 1192 00a2 9A84     		strh	r2, [r3, #36]	@ movhi
 1193              	.L85:
 448:Src/adc.c     ****   }
 449:Src/adc.c     **** 
 450:Src/adc.c     ****   if(sensor.adc[3] > threshhold_3){
 1194              		.loc 1 450 0
 1195 00a4 0B4B     		ldr	r3, .L89
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s 			page 30


 1196 00a6 DA8A     		ldrh	r2, [r3, #22]
 1197 00a8 40F64853 		movw	r3, #3400
 1198 00ac 9A42     		cmp	r2, r3
 1199 00ae 0BD9     		bls	.L86
 451:Src/adc.c     ****     if(sensor.count[3] > 20){
 1200              		.loc 1 451 0
 1201 00b0 084B     		ldr	r3, .L89
 1202 00b2 DB8C     		ldrh	r3, [r3, #38]
 1203 00b4 142B     		cmp	r3, #20
 1204 00b6 03D9     		bls	.L87
 452:Src/adc.c     ****       sensor.wall[3] = true;
 1205              		.loc 1 452 0
 1206 00b8 064B     		ldr	r3, .L89
 1207 00ba 0122     		movs	r2, #1
 1208 00bc DA83     		strh	r2, [r3, #30]	@ movhi
 1209 00be 7047     		bx	lr
 1210              	.L87:
 453:Src/adc.c     ****     } else{
 454:Src/adc.c     ****       sensor.count[3] ++;
 1211              		.loc 1 454 0
 1212 00c0 0133     		adds	r3, r3, #1
 1213 00c2 044A     		ldr	r2, .L89
 1214 00c4 D384     		strh	r3, [r2, #38]	@ movhi
 1215 00c6 7047     		bx	lr
 1216              	.L86:
 455:Src/adc.c     ****     }
 456:Src/adc.c     ****   }else{
 457:Src/adc.c     ****     sensor.wall[3] = false;
 1217              		.loc 1 457 0
 1218 00c8 024B     		ldr	r3, .L89
 1219 00ca 0022     		movs	r2, #0
 1220 00cc DA83     		strh	r2, [r3, #30]	@ movhi
 458:Src/adc.c     ****     sensor.count[3] = 0;
 1221              		.loc 1 458 0
 1222 00ce DA84     		strh	r2, [r3, #38]	@ movhi
 459:Src/adc.c     ****   }
 460:Src/adc.c     **** }
 1223              		.loc 1 460 0
 1224 00d0 7047     		bx	lr
 1225              	.L90:
 1226 00d2 00BF     		.align	2
 1227              	.L89:
 1228 00d4 00000000 		.word	sensor
 1229              		.cfi_endproc
 1230              	.LFE136:
 1232              		.comm	hadc3,72,4
 1233              		.comm	hadc2,72,4
 1234              		.comm	hadc1,72,4
 1235              		.section	.rodata.MX_ADC1_Init.str1.4,"aMS",%progbits,1
 1236              		.align	2
 1237              	.LC0:
 1238 0000 5372632F 		.ascii	"Src/adc.c\000"
 1238      6164632E 
 1238      6300
 1239              		.text
 1240              	.Letext0:
 1241              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s 			page 31


 1242              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 1243              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 1244              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 1245              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f405xx.h"
 1246              		.file 7 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 1247              		.file 8 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 1248              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\lib\\gcc\\arm-none-eabi
 1249              		.file 10 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 1250              		.file 11 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1251              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1252              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1253              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1254              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1255              		.file 16 "Inc/adc.h"
 1256              		.file 17 "Inc/global.h"
ARM GAS  C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s 			page 32


DEFINED SYMBOLS
                            *ABS*:00000000 adc.c
C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s:18     .text.MX_ADC1_Init:00000000 $t
C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s:25     .text.MX_ADC1_Init:00000000 MX_ADC1_Init
C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s:117    .text.MX_ADC1_Init:00000060 $d
                            *COM*:00000048 hadc1
C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s:125    .text.MX_ADC2_Init:00000000 $t
C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s:132    .text.MX_ADC2_Init:00000000 MX_ADC2_Init
C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s:222    .text.MX_ADC2_Init:00000060 $d
                            *COM*:00000048 hadc2
C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s:230    .text.MX_ADC3_Init:00000000 $t
C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s:237    .text.MX_ADC3_Init:00000000 MX_ADC3_Init
C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s:327    .text.MX_ADC3_Init:00000060 $d
                            *COM*:00000048 hadc3
C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s:335    .text.HAL_ADC_MspInit:00000000 $t
C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s:342    .text.HAL_ADC_MspInit:00000000 HAL_ADC_MspInit
C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s:474    .text.HAL_ADC_MspInit:000000a4 $d
C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s:483    .text.HAL_ADC_MspDeInit:00000000 $t
C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s:490    .text.HAL_ADC_MspDeInit:00000000 HAL_ADC_MspDeInit
C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s:565    .text.HAL_ADC_MspDeInit:00000058 $d
C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s:574    .text.update_batt_date:00000000 $t
C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s:581    .text.update_batt_date:00000000 update_batt_date
C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s:642    .text.update_batt_date:00000044 $d
C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s:648    .text.update_fr_sen_on:00000000 $t
C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s:655    .text.update_fr_sen_on:00000000 update_fr_sen_on
C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s:747    .text.update_fr_sen_on:00000078 $d
C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s:753    .text.update_side_sen_on:00000000 $t
C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s:760    .text.update_side_sen_on:00000000 update_side_sen_on
C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s:851    .text.update_side_sen_on:00000074 $d
C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s:857    .text.update_fr_sen_off:00000000 $t
C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s:864    .text.update_fr_sen_off:00000000 update_fr_sen_off
C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s:956    .text.update_fr_sen_off:00000078 $d
C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s:962    .text.update_side_sen_off:00000000 $t
C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s:969    .text.update_side_sen_off:00000000 update_side_sen_off
C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s:1060   .text.update_side_sen_off:00000074 $d
C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s:1066   .text.update_wall:00000000 $t
C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s:1073   .text.update_wall:00000000 update_wall
C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s:1228   .text.update_wall:000000d4 $d
C:\Users\kotaro\AppData\Local\Temp\cciGZqVK.s:1236   .rodata.MX_ADC1_Init.str1.4:00000000 $d

UNDEFINED SYMBOLS
HAL_ADC_Init
HAL_ADC_ConfigChannel
_Error_Handler
HAL_GPIO_Init
HAL_GPIO_DeInit
HAL_ADC_Start
HAL_ADC_PollForConversion
HAL_ADC_GetValue
HAL_ADC_Stop
batt_analog
sensor
